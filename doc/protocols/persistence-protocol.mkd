# The message-broker/persistence-layer protocol

The message broker uses the persistence layer to obtain information
on users and other (remote) message brokers. Another purpose is saving messages
for users which are currently off-line.

This protocol is stateless and should normally use UNIX datagram sockets. The path of
the socket is specified in an environment variable.

The sequence number (or string) has to be a unique identifier for a command, allowing
both sides to reference it at later times.

## Configuration

The persistence layer is configured using the following environment variables:

* `CHATTP_PERSISTENCE_LAYER_ADDRESS` - The socket address of the persistence layer daemon
* `CHATTP_PERSISTENCE_LAYER_CONN_TYPE` - ("UNIX"/"UDP") How to connect to that daemon.
* `CHATTP_REDIS_SOCK`: the socket of the redis instance to be used
* `CHATTP_REDIS_CONN_TYPE`: whether the redis socket is in the UNIX ("UNIX") or INET ("TCP") domain.

## Commands

The fields of the commands are delimited by newlines (LF). The specification below uses
spaces solely for better readability.

The command tokens are not fixed yet, as well as the actual message format.

    <sequence number> UREG <user name> <password>
    [answer:]
    <sequence number> UREGD {OK|FAIL}

Register a new user with the specified password.

    <sequence number> CHKPASS <user name> <submitted password>
    [answer:]
    <sequence number> CHKDPASS {OK|FAIL}


Check if the submitted password is correct. This command is used when logging in a already registered user.

    <sequence number> LOGIN <user name> <message broker name>
    [answer:]
    <sequence number> LGDIN {OK|FAIL}

Log the specified user in and specify which message broker has to be used to send messages to that user. This should
be a valid FQDN or an IP address.

    <sequence number> ULKUP <user name>
    [answer:]
    <sequence number> ULKDUP <message broker name>

Look up where a certain user may be reached; if cHaTTP runs on a cluster, two communicating users may be logged in
on two different web servers and therefore message brokers. The information is stored in a central Redis database.

    <sequence number> MSGSV <user name> <message text/information>
    [answer:]
    <sequence number> MSGSVD {OK|FAIL}

Save a message for a user who is currently not online.

    <sequence number> MSGGT <user name>
    [answer:]
    <sequence number> MSGS <message 1> <message 2> <...>

Retrieve saved messages for a certain user.

