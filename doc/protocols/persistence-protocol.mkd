# The message-broker/persistence-layer protocol

The message broker uses the persistence layer to obtain information
on users and other (remote) message brokers. Another purpose is saving messages
for users which are currently off-line.

This protocol is stateless and should normally use UNIX datagram sockets. The path of
the socket is specified in an environment variable.

The sequence number *n* is a unique number fulfilling `0 < n < 2^64` (fitting in an `unsigned long long`
value) and may be used to refer to individual transactions. A sequence number SHOULD be unique; otherwise undefined
behavior may arise.

This specification uses the keywords indicated by RFC 2119.

## Configuration

The persistence layer is configured using the following environment variables:

* `CHATTP_PERSISTENCE_LAYER_ADDRESS` - The socket address of the persistence layer daemon
* `CHATTP_PERSISTENCE_LAYER_CONN_TYPE` - ("UNIX"/"UDP") How to connect to that daemon.
* `CHATTP_REDIS_SOCK`: the socket of the redis instance to be used
* `CHATTP_REDIS_CONN_TYPE`: whether the redis socket is in the UNIX ("UNIX") or INET ("TCP") domain.

## Commands

The fields of the commands SHOULD be delimited by newlines (LF). The specification below uses
spaces solely for better readability. In practice, spaces MAY also be used (exception: The `MSGS` protocol
message).

The answer MUST contain a status stating if an operation failed or succeeded. This status MUST be indicated
by the keywords `OK` and `FAIL`.

The command tokens are not fixed yet and may change in future, as well as the actual message format.

    <sequence number> UREG <user name> <password>
    [answer:]
    <sequence number> UREGD {OK|FAIL}

Register a new user with the specified password. This operation MUST fail if there's already a user registered
with this name. A protocol message type for changing the password may come in the near future.

    <sequence number> CHKPASS <user name> <submitted password>
    [answer:]
    <sequence number> CHKDPASS {OK|FAIL}

Check if the submitted password is correct. This command is used when logging in a already registered user. This command
MUST fail if the password is not correct or the user doesn't exist.

    <sequence number> LOGIN <user name> <message broker name> <channel id>
    [answer:]
    <sequence number> LGDIN {OK|FAIL}

Log the specified user in and specify which message broker has to be used to send messages to that user. This SHOULD
be a valid FQDN. It also MAY be an IP address.

    <sequence number> ULKUP <user name>
    [answer:]
    <sequence number> ULKDUP {OK <message broker name> <channel id>|FAIL}

Look up where a certain user may be reached; if cHaTTP runs on a cluster, two communicating users may be logged in
on two different web servers and therefore message brokers. The information is stored in a central Redis database.

    <sequence number> MSGSV <user name> <message text/information>
    [answer:]
    <sequence number> MSGSVD {OK|FAIL}

Save a message for a user who is currently not online.

    <sequence number> MSGGT <user name>
    [answer:]
    <sequence number> MSGS {OK <message 1> <message 2> <...>|FAIL}

Retrieve saved messages for a certain user. This operation SHALL fail if there is no user registered with the given name.
The spaces between the messages are to be replaced by LF characters. The messages itself MUST NOT contain newline characters.

