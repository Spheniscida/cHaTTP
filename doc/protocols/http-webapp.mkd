# Webapp (incoming) protocol

This document describes how clients submit requests to a cHaTTP system via
HTTP (over FastCGI). It uses the keywords indicated by RFC 2119.

Requests MUST use the HTTP method `GET`, except for the "send message" request
which MUST use `POST`.

In general, non-ASCII characters are forbidden in user names and passwords. They are
transmitted in request URLs and we don't provide any logic yet to decode them.

## Paths

* Base path (`$base`): This is the path common to all other paths used by cHaTTP. It may be an arbitrary
path on the web server.
* Request path: The request path is `$base/chattp_request`.
* Poll path: The polling path is `$base/get`. It should be followed by a `?` character and a key value
pair with `chan_id` as the key and a ASCII string of usually 64 characters as value. Example:
`GET $base/get?chan_id=rtwmrsswunivdbhdybvaoswaaitrtdgyhldghevlttuyvykahkodmmxzyglkznea`. The web
server will not return a response until a new message has arrived.

## Sending requests

If HTTP POST is used, the Content-Type field MUST be set to `application/x-www-form-urlencoded`.
Additionally, the length of the request string MUST be specified in the `Content-Length` field. Usually,
browsers do this automatically.

In general, HTTP POST is used whenever the state of the server is altered. The only exceptions
are status requests and receiving messages which may/must be requested with GET. However, the server
will not forbid to use GET for any requests excepted send requests.

If a request lacks parameters needed for an operation, it SHALL fail with HTTP status 400.

## Receiving answers
### JSON fields

The answers from the web server MUST be in JSON format. Fields that are always available in returned JSON objects are:

* "status" (boolean) -- success or fail
* "error" (string) -- reason for fail, empty on success
* "type" (string) -- type of transaction; this may be `logged-in`, `registered`, `logged-out`, `message-accepted` and `isonline`.
The names stay the same on errors; `message-accepted` with `status == false` means that the message hasn't been accepted.

Additional fields are described for each command.

## Request types

#### Log-in

    POST $base/chattp_request/login?user_name=<user>&password=<password> HTTP/1.1

The `login` subcommand checks if the user is authorized to log-in and if he is, he marks
the user as online.

In the response, a channel id will be sent; this is the 64-character lower-case ASCII identifier
mentioned above. It serves the purpose of a cookie and identifies the user's session. It is used
to do long-polling as well as sending messages.

The server will respond to the login command with a JSON object containing the status (if the login
did succeed or not) and, if it did succeed, the channel id:

    HTTP/1.1 200 OK!
    Server: nginx/1.5.12
    Date: Tue, 22 Apr 2014 18:36:51 GMT
    Content-Type: text/plain
    Transfer-Encoding: chunked
    Connection: keep-alive

    {"type":"logged-in","status":true,"channel_id":"rtwmrsswunivdbhdybvaoswaaitrtdgyhldghevlttuyvykahkodmmxzyglkzneaa"}
    # or, if it failed:
    {"type":"logged-in","status":false,"channel_id":""}

#### Log-out

    POST $base/chattp_request/logout?user_name=<user>&channel_id=rtwmrsswunivdbhdybvaoswaaitrtdgyhldghevlttuyvykahkodmmxzyglkzneaa HTTP/1.1

Marks a user as offline (so new incoming messages are saved). This needs the channel id as authentication token
so not everyone may log out anyone else.

#### Register a new user

    POST $base/chattp_request/register?user_name=<user>&password=<password>

Registers a user with the given user name and password.

This command does not perform a log-in.

#### Send message

    POST $base/chattp_request/send?user_name=<user>&channel_id=rtwmrsswunivdbhdybvaoswaaitrtdgyhldghevlttuyvykahkodmmxzyglkzneaa&dest_user=<user2> HTTP/1.1
    Host: ...
    Content-Type: text/plain
    Content-Length: 13

    Hello, World!

This command is a little different in what HTTP methods are allowed to be used. POST must be used; the `user_name`, `channel_id` and `dest_user`
parameters are sent in the request string, the message is sent in the body. This avoids having the message encoded which
in turn allows any characters to be used in the message content. You may want to set the encoding in the HTTP headers appropriately.

#### Query status of user

    GET $base/chattp_request/isonline?user_name=<user>

Asks if the specified user is online. If he is, the JSON object in the reply body will have its "status" field set to `true`, else to `false`.
It is also set to `false` if the specified user doesn't exist. The "type" field is set to "isonline".

**See "http-messages.mkd" for how to receive messages.**

### Receiving saved messages

Incoming messages are saved internally if the receiving user is not online at the time of sending the message.

Messages that have been saved may be retrieved using the following GET request:

    POST $base/chattp_request/savedmessages?user_name=<usr>&channel_id=<channel>

As result, a JSON object is returned. The "type" field is set to "saved-messages", the "status" and "error" fields indicate errors.
The "messages" field consists of an array of JSON records. In this array, message objects are stored, of which each has the fields "from",
"timestamp" and "message". The timestamp is an RFC2822 timestamp.

