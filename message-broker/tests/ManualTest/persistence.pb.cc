// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: persistence.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "persistence.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace chattp {

namespace {

const ::google::protobuf::Descriptor* PersistenceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PersistenceRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PersistenceRequest_PersistenceRequestType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PersistenceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PersistenceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PersistenceResponse_UserLocation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PersistenceResponse_UserLocation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PersistenceResponse_PersistenceResponseType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_persistence_2eproto() {
  protobuf_AddDesc_persistence_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "persistence.proto");
  GOOGLE_CHECK(file != NULL);
  PersistenceRequest_descriptor_ = file->message_type(0);
  static const int PersistenceRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersistenceRequest, sequence_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersistenceRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersistenceRequest, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersistenceRequest, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersistenceRequest, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersistenceRequest, broker_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersistenceRequest, user_names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersistenceRequest, sender_),
  };
  PersistenceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PersistenceRequest_descriptor_,
      PersistenceRequest::default_instance_,
      PersistenceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersistenceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersistenceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PersistenceRequest));
  PersistenceRequest_PersistenceRequestType_descriptor_ = PersistenceRequest_descriptor_->enum_type(0);
  PersistenceResponse_descriptor_ = file->message_type(1);
  static const int PersistenceResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersistenceResponse, sequence_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersistenceResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersistenceResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersistenceResponse, user_locations_),
  };
  PersistenceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PersistenceResponse_descriptor_,
      PersistenceResponse::default_instance_,
      PersistenceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersistenceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersistenceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PersistenceResponse));
  PersistenceResponse_UserLocation_descriptor_ = PersistenceResponse_descriptor_->nested_type(0);
  static const int PersistenceResponse_UserLocation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersistenceResponse_UserLocation, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersistenceResponse_UserLocation, broker_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersistenceResponse_UserLocation, channel_id_),
  };
  PersistenceResponse_UserLocation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PersistenceResponse_UserLocation_descriptor_,
      PersistenceResponse_UserLocation::default_instance_,
      PersistenceResponse_UserLocation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersistenceResponse_UserLocation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersistenceResponse_UserLocation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PersistenceResponse_UserLocation));
  PersistenceResponse_PersistenceResponseType_descriptor_ = PersistenceResponse_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_persistence_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PersistenceRequest_descriptor_, &PersistenceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PersistenceResponse_descriptor_, &PersistenceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PersistenceResponse_UserLocation_descriptor_, &PersistenceResponse_UserLocation::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_persistence_2eproto() {
  delete PersistenceRequest::default_instance_;
  delete PersistenceRequest_reflection_;
  delete PersistenceResponse::default_instance_;
  delete PersistenceResponse_reflection_;
  delete PersistenceResponse_UserLocation::default_instance_;
  delete PersistenceResponse_UserLocation_reflection_;
}

void protobuf_AddDesc_persistence_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021persistence.proto\022\006chattp\"\334\002\n\022Persiste"
    "nceRequest\022\027\n\017sequence_number\030\001 \002(\004\022\?\n\004t"
    "ype\030\002 \002(\01621.chattp.PersistenceRequest.Pe"
    "rsistenceRequestType\022\021\n\tuser_name\030\003 \001(\t\022"
    "\020\n\010password\030\004 \001(\t\022\022\n\nchannel_id\030\005 \001(\t\022\023\n"
    "\013broker_name\030\006 \001(\t\022\022\n\nuser_names\030\007 \003(\t\022\016"
    "\n\006sender\030\010 \001(\t\"z\n\026PersistenceRequestType"
    "\022\014\n\010REGISTER\020\000\022\t\n\005LOGIN\020\001\022\n\n\006LOGOUT\020\002\022\r\n"
    "\tCHECKPASS\020\003\022\n\n\006LOOKUP\020\004\022\017\n\013SAVEMESSAGE\020"
    "\005\022\017\n\013GETMESSAGES\020\006\"\243\003\n\023PersistenceRespon"
    "se\022\027\n\017sequence_number\030\001 \002(\004\022A\n\004type\030\002 \002("
    "\01623.chattp.PersistenceResponse.Persisten"
    "ceResponseType\022\024\n\006status\030\003 \002(\010:\004true\022@\n\016"
    "user_locations\030\004 \003(\0132(.chattp.Persistenc"
    "eResponse.UserLocation\032M\n\014UserLocation\022\024"
    "\n\006online\030\001 \002(\010:\004true\022\023\n\013broker_name\030\002 \001("
    "\t\022\022\n\nchannel_id\030\003 \001(\t\"\210\001\n\027PersistenceRes"
    "ponseType\022\016\n\nREGISTERED\020\000\022\014\n\010LOGGEDIN\020\001\022"
    "\r\n\tLOGGEDOUT\020\002\022\017\n\013CHECKEDPASS\020\003\022\014\n\010LOOKE"
    "DUP\020\004\022\020\n\014SAVEDMESSAGE\020\005\022\017\n\013GOTMESSAGES\020\006", 800);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "persistence.proto", &protobuf_RegisterTypes);
  PersistenceRequest::default_instance_ = new PersistenceRequest();
  PersistenceResponse::default_instance_ = new PersistenceResponse();
  PersistenceResponse_UserLocation::default_instance_ = new PersistenceResponse_UserLocation();
  PersistenceRequest::default_instance_->InitAsDefaultInstance();
  PersistenceResponse::default_instance_->InitAsDefaultInstance();
  PersistenceResponse_UserLocation::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_persistence_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_persistence_2eproto {
  StaticDescriptorInitializer_persistence_2eproto() {
    protobuf_AddDesc_persistence_2eproto();
  }
} static_descriptor_initializer_persistence_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* PersistenceRequest_PersistenceRequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PersistenceRequest_PersistenceRequestType_descriptor_;
}
bool PersistenceRequest_PersistenceRequestType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PersistenceRequest_PersistenceRequestType PersistenceRequest::REGISTER;
const PersistenceRequest_PersistenceRequestType PersistenceRequest::LOGIN;
const PersistenceRequest_PersistenceRequestType PersistenceRequest::LOGOUT;
const PersistenceRequest_PersistenceRequestType PersistenceRequest::CHECKPASS;
const PersistenceRequest_PersistenceRequestType PersistenceRequest::LOOKUP;
const PersistenceRequest_PersistenceRequestType PersistenceRequest::SAVEMESSAGE;
const PersistenceRequest_PersistenceRequestType PersistenceRequest::GETMESSAGES;
const PersistenceRequest_PersistenceRequestType PersistenceRequest::PersistenceRequestType_MIN;
const PersistenceRequest_PersistenceRequestType PersistenceRequest::PersistenceRequestType_MAX;
const int PersistenceRequest::PersistenceRequestType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PersistenceRequest::kSequenceNumberFieldNumber;
const int PersistenceRequest::kTypeFieldNumber;
const int PersistenceRequest::kUserNameFieldNumber;
const int PersistenceRequest::kPasswordFieldNumber;
const int PersistenceRequest::kChannelIdFieldNumber;
const int PersistenceRequest::kBrokerNameFieldNumber;
const int PersistenceRequest::kUserNamesFieldNumber;
const int PersistenceRequest::kSenderFieldNumber;
#endif  // !_MSC_VER

PersistenceRequest::PersistenceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PersistenceRequest::InitAsDefaultInstance() {
}

PersistenceRequest::PersistenceRequest(const PersistenceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PersistenceRequest::SharedCtor() {
  _cached_size_ = 0;
  sequence_number_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  broker_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PersistenceRequest::~PersistenceRequest() {
  SharedDtor();
}

void PersistenceRequest::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_id_;
  }
  if (broker_name_ != &::google::protobuf::internal::kEmptyString) {
    delete broker_name_;
  }
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_;
  }
  if (this != default_instance_) {
  }
}

void PersistenceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PersistenceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PersistenceRequest_descriptor_;
}

const PersistenceRequest& PersistenceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_persistence_2eproto();
  return *default_instance_;
}

PersistenceRequest* PersistenceRequest::default_instance_ = NULL;

PersistenceRequest* PersistenceRequest::New() const {
  return new PersistenceRequest;
}

void PersistenceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sequence_number_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_channel_id()) {
      if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_id_->clear();
      }
    }
    if (has_broker_name()) {
      if (broker_name_ != &::google::protobuf::internal::kEmptyString) {
        broker_name_->clear();
      }
    }
    if (has_sender()) {
      if (sender_ != &::google::protobuf::internal::kEmptyString) {
        sender_->clear();
      }
    }
  }
  user_names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PersistenceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 sequence_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sequence_number_)));
          set_has_sequence_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .chattp.PersistenceRequest.PersistenceRequestType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chattp::PersistenceRequest_PersistenceRequestType_IsValid(value)) {
            set_type(static_cast< ::chattp::PersistenceRequest_PersistenceRequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_name;
        break;
      }

      // optional string user_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }

      // optional string password = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_channel_id;
        break;
      }

      // optional string channel_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_id().data(), this->channel_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_broker_name;
        break;
      }

      // optional string broker_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_broker_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broker_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->broker_name().data(), this->broker_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_user_names;
        break;
      }

      // repeated string user_names = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_user_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_names(this->user_names_size() - 1).data(),
            this->user_names(this->user_names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_user_names;
        if (input->ExpectTag(66)) goto parse_sender;
        break;
      }

      // optional string sender = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PersistenceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 sequence_number = 1;
  if (has_sequence_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sequence_number(), output);
  }

  // required .chattp.PersistenceRequest.PersistenceRequestType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user_name(), output);
  }

  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->password(), output);
  }

  // optional string channel_id = 5;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->channel_id(), output);
  }

  // optional string broker_name = 6;
  if (has_broker_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->broker_name().data(), this->broker_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->broker_name(), output);
  }

  // repeated string user_names = 7;
  for (int i = 0; i < this->user_names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->user_names(i).data(), this->user_names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->user_names(i), output);
  }

  // optional string sender = 8;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->sender(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PersistenceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 sequence_number = 1;
  if (has_sequence_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sequence_number(), target);
  }

  // required .chattp.PersistenceRequest.PersistenceRequestType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_name(), target);
  }

  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }

  // optional string channel_id = 5;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->channel_id(), target);
  }

  // optional string broker_name = 6;
  if (has_broker_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->broker_name().data(), this->broker_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->broker_name(), target);
  }

  // repeated string user_names = 7;
  for (int i = 0; i < this->user_names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_names(i).data(), this->user_names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->user_names(i), target);
  }

  // optional string sender = 8;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->sender(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PersistenceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 sequence_number = 1;
    if (has_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sequence_number());
    }

    // required .chattp.PersistenceRequest.PersistenceRequestType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string user_name = 3;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional string password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string channel_id = 5;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_id());
    }

    // optional string broker_name = 6;
    if (has_broker_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->broker_name());
    }

    // optional string sender = 8;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }

  }
  // repeated string user_names = 7;
  total_size += 1 * this->user_names_size();
  for (int i = 0; i < this->user_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->user_names(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PersistenceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PersistenceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PersistenceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PersistenceRequest::MergeFrom(const PersistenceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_names_.MergeFrom(from.user_names_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequence_number()) {
      set_sequence_number(from.sequence_number());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_broker_name()) {
      set_broker_name(from.broker_name());
    }
    if (from.has_sender()) {
      set_sender(from.sender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PersistenceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersistenceRequest::CopyFrom(const PersistenceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersistenceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PersistenceRequest::Swap(PersistenceRequest* other) {
  if (other != this) {
    std::swap(sequence_number_, other->sequence_number_);
    std::swap(type_, other->type_);
    std::swap(user_name_, other->user_name_);
    std::swap(password_, other->password_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(broker_name_, other->broker_name_);
    user_names_.Swap(&other->user_names_);
    std::swap(sender_, other->sender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PersistenceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PersistenceRequest_descriptor_;
  metadata.reflection = PersistenceRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PersistenceResponse_PersistenceResponseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PersistenceResponse_PersistenceResponseType_descriptor_;
}
bool PersistenceResponse_PersistenceResponseType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PersistenceResponse_PersistenceResponseType PersistenceResponse::REGISTERED;
const PersistenceResponse_PersistenceResponseType PersistenceResponse::LOGGEDIN;
const PersistenceResponse_PersistenceResponseType PersistenceResponse::LOGGEDOUT;
const PersistenceResponse_PersistenceResponseType PersistenceResponse::CHECKEDPASS;
const PersistenceResponse_PersistenceResponseType PersistenceResponse::LOOKEDUP;
const PersistenceResponse_PersistenceResponseType PersistenceResponse::SAVEDMESSAGE;
const PersistenceResponse_PersistenceResponseType PersistenceResponse::GOTMESSAGES;
const PersistenceResponse_PersistenceResponseType PersistenceResponse::PersistenceResponseType_MIN;
const PersistenceResponse_PersistenceResponseType PersistenceResponse::PersistenceResponseType_MAX;
const int PersistenceResponse::PersistenceResponseType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PersistenceResponse_UserLocation::kOnlineFieldNumber;
const int PersistenceResponse_UserLocation::kBrokerNameFieldNumber;
const int PersistenceResponse_UserLocation::kChannelIdFieldNumber;
#endif  // !_MSC_VER

PersistenceResponse_UserLocation::PersistenceResponse_UserLocation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PersistenceResponse_UserLocation::InitAsDefaultInstance() {
}

PersistenceResponse_UserLocation::PersistenceResponse_UserLocation(const PersistenceResponse_UserLocation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PersistenceResponse_UserLocation::SharedCtor() {
  _cached_size_ = 0;
  online_ = true;
  broker_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PersistenceResponse_UserLocation::~PersistenceResponse_UserLocation() {
  SharedDtor();
}

void PersistenceResponse_UserLocation::SharedDtor() {
  if (broker_name_ != &::google::protobuf::internal::kEmptyString) {
    delete broker_name_;
  }
  if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_id_;
  }
  if (this != default_instance_) {
  }
}

void PersistenceResponse_UserLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PersistenceResponse_UserLocation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PersistenceResponse_UserLocation_descriptor_;
}

const PersistenceResponse_UserLocation& PersistenceResponse_UserLocation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_persistence_2eproto();
  return *default_instance_;
}

PersistenceResponse_UserLocation* PersistenceResponse_UserLocation::default_instance_ = NULL;

PersistenceResponse_UserLocation* PersistenceResponse_UserLocation::New() const {
  return new PersistenceResponse_UserLocation;
}

void PersistenceResponse_UserLocation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    online_ = true;
    if (has_broker_name()) {
      if (broker_name_ != &::google::protobuf::internal::kEmptyString) {
        broker_name_->clear();
      }
    }
    if (has_channel_id()) {
      if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PersistenceResponse_UserLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool online = 1 [default = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_broker_name;
        break;
      }

      // optional string broker_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_broker_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broker_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->broker_name().data(), this->broker_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_channel_id;
        break;
      }

      // optional string channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_id().data(), this->channel_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PersistenceResponse_UserLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool online = 1 [default = true];
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->online(), output);
  }

  // optional string broker_name = 2;
  if (has_broker_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->broker_name().data(), this->broker_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->broker_name(), output);
  }

  // optional string channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->channel_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PersistenceResponse_UserLocation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool online = 1 [default = true];
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->online(), target);
  }

  // optional string broker_name = 2;
  if (has_broker_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->broker_name().data(), this->broker_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->broker_name(), target);
  }

  // optional string channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->channel_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PersistenceResponse_UserLocation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool online = 1 [default = true];
    if (has_online()) {
      total_size += 1 + 1;
    }

    // optional string broker_name = 2;
    if (has_broker_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->broker_name());
    }

    // optional string channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PersistenceResponse_UserLocation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PersistenceResponse_UserLocation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PersistenceResponse_UserLocation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PersistenceResponse_UserLocation::MergeFrom(const PersistenceResponse_UserLocation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_broker_name()) {
      set_broker_name(from.broker_name());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PersistenceResponse_UserLocation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersistenceResponse_UserLocation::CopyFrom(const PersistenceResponse_UserLocation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersistenceResponse_UserLocation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PersistenceResponse_UserLocation::Swap(PersistenceResponse_UserLocation* other) {
  if (other != this) {
    std::swap(online_, other->online_);
    std::swap(broker_name_, other->broker_name_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PersistenceResponse_UserLocation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PersistenceResponse_UserLocation_descriptor_;
  metadata.reflection = PersistenceResponse_UserLocation_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PersistenceResponse::kSequenceNumberFieldNumber;
const int PersistenceResponse::kTypeFieldNumber;
const int PersistenceResponse::kStatusFieldNumber;
const int PersistenceResponse::kUserLocationsFieldNumber;
#endif  // !_MSC_VER

PersistenceResponse::PersistenceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PersistenceResponse::InitAsDefaultInstance() {
}

PersistenceResponse::PersistenceResponse(const PersistenceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PersistenceResponse::SharedCtor() {
  _cached_size_ = 0;
  sequence_number_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  status_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PersistenceResponse::~PersistenceResponse() {
  SharedDtor();
}

void PersistenceResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PersistenceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PersistenceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PersistenceResponse_descriptor_;
}

const PersistenceResponse& PersistenceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_persistence_2eproto();
  return *default_instance_;
}

PersistenceResponse* PersistenceResponse::default_instance_ = NULL;

PersistenceResponse* PersistenceResponse::New() const {
  return new PersistenceResponse;
}

void PersistenceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sequence_number_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
    status_ = true;
  }
  user_locations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PersistenceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 sequence_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sequence_number_)));
          set_has_sequence_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .chattp.PersistenceResponse.PersistenceResponseType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chattp::PersistenceResponse_PersistenceResponseType_IsValid(value)) {
            set_type(static_cast< ::chattp::PersistenceResponse_PersistenceResponseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required bool status = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user_locations;
        break;
      }

      // repeated .chattp.PersistenceResponse.UserLocation user_locations = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_locations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_locations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user_locations;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PersistenceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 sequence_number = 1;
  if (has_sequence_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sequence_number(), output);
  }

  // required .chattp.PersistenceResponse.PersistenceResponseType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required bool status = 3 [default = true];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->status(), output);
  }

  // repeated .chattp.PersistenceResponse.UserLocation user_locations = 4;
  for (int i = 0; i < this->user_locations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->user_locations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PersistenceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 sequence_number = 1;
  if (has_sequence_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sequence_number(), target);
  }

  // required .chattp.PersistenceResponse.PersistenceResponseType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required bool status = 3 [default = true];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->status(), target);
  }

  // repeated .chattp.PersistenceResponse.UserLocation user_locations = 4;
  for (int i = 0; i < this->user_locations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->user_locations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PersistenceResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 sequence_number = 1;
    if (has_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sequence_number());
    }

    // required .chattp.PersistenceResponse.PersistenceResponseType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required bool status = 3 [default = true];
    if (has_status()) {
      total_size += 1 + 1;
    }

  }
  // repeated .chattp.PersistenceResponse.UserLocation user_locations = 4;
  total_size += 1 * this->user_locations_size();
  for (int i = 0; i < this->user_locations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_locations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PersistenceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PersistenceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PersistenceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PersistenceResponse::MergeFrom(const PersistenceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_locations_.MergeFrom(from.user_locations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequence_number()) {
      set_sequence_number(from.sequence_number());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PersistenceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersistenceResponse::CopyFrom(const PersistenceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersistenceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < user_locations_size(); i++) {
    if (!this->user_locations(i).IsInitialized()) return false;
  }
  return true;
}

void PersistenceResponse::Swap(PersistenceResponse* other) {
  if (other != this) {
    std::swap(sequence_number_, other->sequence_number_);
    std::swap(type_, other->type_);
    std::swap(status_, other->status_);
    user_locations_.Swap(&other->user_locations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PersistenceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PersistenceResponse_descriptor_;
  metadata.reflection = PersistenceResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace chattp

// @@protoc_insertion_point(global_scope)
