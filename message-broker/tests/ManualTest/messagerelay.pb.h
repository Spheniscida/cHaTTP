// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messagerelay.proto

#ifndef PROTOBUF_messagerelay_2eproto__INCLUDED
#define PROTOBUF_messagerelay_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "message.pb.h"
// @@protoc_insertion_point(includes)

namespace chattp {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_messagerelay_2eproto();
void protobuf_AssignDesc_messagerelay_2eproto();
void protobuf_ShutdownFile_messagerelay_2eproto();

class MessageRelayRequest;
class MessageRelayResponse;

enum MessageRelayRequest_MessageRelayRequestType {
  MessageRelayRequest_MessageRelayRequestType_SENDMESSAGE = 0,
  MessageRelayRequest_MessageRelayRequestType_CREATECHANNEL = 1,
  MessageRelayRequest_MessageRelayRequestType_DELETECHANNEL = 2
};
bool MessageRelayRequest_MessageRelayRequestType_IsValid(int value);
const MessageRelayRequest_MessageRelayRequestType MessageRelayRequest_MessageRelayRequestType_MessageRelayRequestType_MIN = MessageRelayRequest_MessageRelayRequestType_SENDMESSAGE;
const MessageRelayRequest_MessageRelayRequestType MessageRelayRequest_MessageRelayRequestType_MessageRelayRequestType_MAX = MessageRelayRequest_MessageRelayRequestType_DELETECHANNEL;
const int MessageRelayRequest_MessageRelayRequestType_MessageRelayRequestType_ARRAYSIZE = MessageRelayRequest_MessageRelayRequestType_MessageRelayRequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageRelayRequest_MessageRelayRequestType_descriptor();
inline const ::std::string& MessageRelayRequest_MessageRelayRequestType_Name(MessageRelayRequest_MessageRelayRequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageRelayRequest_MessageRelayRequestType_descriptor(), value);
}
inline bool MessageRelayRequest_MessageRelayRequestType_Parse(
    const ::std::string& name, MessageRelayRequest_MessageRelayRequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageRelayRequest_MessageRelayRequestType>(
    MessageRelayRequest_MessageRelayRequestType_descriptor(), name, value);
}
enum MessageRelayResponse_MessageRelayResponseType {
  MessageRelayResponse_MessageRelayResponseType_SENTMESSAGE = 0,
  MessageRelayResponse_MessageRelayResponseType_CREATEDCHANNEL = 1,
  MessageRelayResponse_MessageRelayResponseType_DELETEDCHANNEL = 2
};
bool MessageRelayResponse_MessageRelayResponseType_IsValid(int value);
const MessageRelayResponse_MessageRelayResponseType MessageRelayResponse_MessageRelayResponseType_MessageRelayResponseType_MIN = MessageRelayResponse_MessageRelayResponseType_SENTMESSAGE;
const MessageRelayResponse_MessageRelayResponseType MessageRelayResponse_MessageRelayResponseType_MessageRelayResponseType_MAX = MessageRelayResponse_MessageRelayResponseType_DELETEDCHANNEL;
const int MessageRelayResponse_MessageRelayResponseType_MessageRelayResponseType_ARRAYSIZE = MessageRelayResponse_MessageRelayResponseType_MessageRelayResponseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageRelayResponse_MessageRelayResponseType_descriptor();
inline const ::std::string& MessageRelayResponse_MessageRelayResponseType_Name(MessageRelayResponse_MessageRelayResponseType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageRelayResponse_MessageRelayResponseType_descriptor(), value);
}
inline bool MessageRelayResponse_MessageRelayResponseType_Parse(
    const ::std::string& name, MessageRelayResponse_MessageRelayResponseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageRelayResponse_MessageRelayResponseType>(
    MessageRelayResponse_MessageRelayResponseType_descriptor(), name, value);
}
// ===================================================================

class MessageRelayRequest : public ::google::protobuf::Message {
 public:
  MessageRelayRequest();
  virtual ~MessageRelayRequest();

  MessageRelayRequest(const MessageRelayRequest& from);

  inline MessageRelayRequest& operator=(const MessageRelayRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageRelayRequest& default_instance();

  void Swap(MessageRelayRequest* other);

  // implements Message ----------------------------------------------

  MessageRelayRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageRelayRequest& from);
  void MergeFrom(const MessageRelayRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MessageRelayRequest_MessageRelayRequestType MessageRelayRequestType;
  static const MessageRelayRequestType SENDMESSAGE = MessageRelayRequest_MessageRelayRequestType_SENDMESSAGE;
  static const MessageRelayRequestType CREATECHANNEL = MessageRelayRequest_MessageRelayRequestType_CREATECHANNEL;
  static const MessageRelayRequestType DELETECHANNEL = MessageRelayRequest_MessageRelayRequestType_DELETECHANNEL;
  static inline bool MessageRelayRequestType_IsValid(int value) {
    return MessageRelayRequest_MessageRelayRequestType_IsValid(value);
  }
  static const MessageRelayRequestType MessageRelayRequestType_MIN =
    MessageRelayRequest_MessageRelayRequestType_MessageRelayRequestType_MIN;
  static const MessageRelayRequestType MessageRelayRequestType_MAX =
    MessageRelayRequest_MessageRelayRequestType_MessageRelayRequestType_MAX;
  static const int MessageRelayRequestType_ARRAYSIZE =
    MessageRelayRequest_MessageRelayRequestType_MessageRelayRequestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MessageRelayRequestType_descriptor() {
    return MessageRelayRequest_MessageRelayRequestType_descriptor();
  }
  static inline const ::std::string& MessageRelayRequestType_Name(MessageRelayRequestType value) {
    return MessageRelayRequest_MessageRelayRequestType_Name(value);
  }
  static inline bool MessageRelayRequestType_Parse(const ::std::string& name,
      MessageRelayRequestType* value) {
    return MessageRelayRequest_MessageRelayRequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint64 sequence_number = 1;
  inline bool has_sequence_number() const;
  inline void clear_sequence_number();
  static const int kSequenceNumberFieldNumber = 1;
  inline ::google::protobuf::uint64 sequence_number() const;
  inline void set_sequence_number(::google::protobuf::uint64 value);

  // required .chattp.MessageRelayRequest.MessageRelayRequestType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::chattp::MessageRelayRequest_MessageRelayRequestType type() const;
  inline void set_type(::chattp::MessageRelayRequest_MessageRelayRequestType value);

  // required string channel_id = 3;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  inline const ::std::string& channel_id() const;
  inline void set_channel_id(const ::std::string& value);
  inline void set_channel_id(const char* value);
  inline void set_channel_id(const char* value, size_t size);
  inline ::std::string* mutable_channel_id();
  inline ::std::string* release_channel_id();
  inline void set_allocated_channel_id(::std::string* channel_id);

  // optional .chattp.ChattpMessage mesg = 4;
  inline bool has_mesg() const;
  inline void clear_mesg();
  static const int kMesgFieldNumber = 4;
  inline const ::chattp::ChattpMessage& mesg() const;
  inline ::chattp::ChattpMessage* mutable_mesg();
  inline ::chattp::ChattpMessage* release_mesg();
  inline void set_allocated_mesg(::chattp::ChattpMessage* mesg);

  // @@protoc_insertion_point(class_scope:chattp.MessageRelayRequest)
 private:
  inline void set_has_sequence_number();
  inline void clear_has_sequence_number();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_mesg();
  inline void clear_has_mesg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 sequence_number_;
  ::std::string* channel_id_;
  ::chattp::ChattpMessage* mesg_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_messagerelay_2eproto();
  friend void protobuf_AssignDesc_messagerelay_2eproto();
  friend void protobuf_ShutdownFile_messagerelay_2eproto();

  void InitAsDefaultInstance();
  static MessageRelayRequest* default_instance_;
};
// -------------------------------------------------------------------

class MessageRelayResponse : public ::google::protobuf::Message {
 public:
  MessageRelayResponse();
  virtual ~MessageRelayResponse();

  MessageRelayResponse(const MessageRelayResponse& from);

  inline MessageRelayResponse& operator=(const MessageRelayResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageRelayResponse& default_instance();

  void Swap(MessageRelayResponse* other);

  // implements Message ----------------------------------------------

  MessageRelayResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageRelayResponse& from);
  void MergeFrom(const MessageRelayResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MessageRelayResponse_MessageRelayResponseType MessageRelayResponseType;
  static const MessageRelayResponseType SENTMESSAGE = MessageRelayResponse_MessageRelayResponseType_SENTMESSAGE;
  static const MessageRelayResponseType CREATEDCHANNEL = MessageRelayResponse_MessageRelayResponseType_CREATEDCHANNEL;
  static const MessageRelayResponseType DELETEDCHANNEL = MessageRelayResponse_MessageRelayResponseType_DELETEDCHANNEL;
  static inline bool MessageRelayResponseType_IsValid(int value) {
    return MessageRelayResponse_MessageRelayResponseType_IsValid(value);
  }
  static const MessageRelayResponseType MessageRelayResponseType_MIN =
    MessageRelayResponse_MessageRelayResponseType_MessageRelayResponseType_MIN;
  static const MessageRelayResponseType MessageRelayResponseType_MAX =
    MessageRelayResponse_MessageRelayResponseType_MessageRelayResponseType_MAX;
  static const int MessageRelayResponseType_ARRAYSIZE =
    MessageRelayResponse_MessageRelayResponseType_MessageRelayResponseType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MessageRelayResponseType_descriptor() {
    return MessageRelayResponse_MessageRelayResponseType_descriptor();
  }
  static inline const ::std::string& MessageRelayResponseType_Name(MessageRelayResponseType value) {
    return MessageRelayResponse_MessageRelayResponseType_Name(value);
  }
  static inline bool MessageRelayResponseType_Parse(const ::std::string& name,
      MessageRelayResponseType* value) {
    return MessageRelayResponse_MessageRelayResponseType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint64 sequence_number = 1;
  inline bool has_sequence_number() const;
  inline void clear_sequence_number();
  static const int kSequenceNumberFieldNumber = 1;
  inline ::google::protobuf::uint64 sequence_number() const;
  inline void set_sequence_number(::google::protobuf::uint64 value);

  // required .chattp.MessageRelayResponse.MessageRelayResponseType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::chattp::MessageRelayResponse_MessageRelayResponseType type() const;
  inline void set_type(::chattp::MessageRelayResponse_MessageRelayResponseType value);

  // optional bool status = 3 [default = true];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline bool status() const;
  inline void set_status(bool value);

  // @@protoc_insertion_point(class_scope:chattp.MessageRelayResponse)
 private:
  inline void set_has_sequence_number();
  inline void clear_has_sequence_number();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 sequence_number_;
  int type_;
  bool status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_messagerelay_2eproto();
  friend void protobuf_AssignDesc_messagerelay_2eproto();
  friend void protobuf_ShutdownFile_messagerelay_2eproto();

  void InitAsDefaultInstance();
  static MessageRelayResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// MessageRelayRequest

// required uint64 sequence_number = 1;
inline bool MessageRelayRequest::has_sequence_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageRelayRequest::set_has_sequence_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageRelayRequest::clear_has_sequence_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageRelayRequest::clear_sequence_number() {
  sequence_number_ = GOOGLE_ULONGLONG(0);
  clear_has_sequence_number();
}
inline ::google::protobuf::uint64 MessageRelayRequest::sequence_number() const {
  return sequence_number_;
}
inline void MessageRelayRequest::set_sequence_number(::google::protobuf::uint64 value) {
  set_has_sequence_number();
  sequence_number_ = value;
}

// required .chattp.MessageRelayRequest.MessageRelayRequestType type = 2;
inline bool MessageRelayRequest::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageRelayRequest::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageRelayRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageRelayRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::chattp::MessageRelayRequest_MessageRelayRequestType MessageRelayRequest::type() const {
  return static_cast< ::chattp::MessageRelayRequest_MessageRelayRequestType >(type_);
}
inline void MessageRelayRequest::set_type(::chattp::MessageRelayRequest_MessageRelayRequestType value) {
  assert(::chattp::MessageRelayRequest_MessageRelayRequestType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required string channel_id = 3;
inline bool MessageRelayRequest::has_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MessageRelayRequest::set_has_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MessageRelayRequest::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MessageRelayRequest::clear_channel_id() {
  if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
    channel_id_->clear();
  }
  clear_has_channel_id();
}
inline const ::std::string& MessageRelayRequest::channel_id() const {
  return *channel_id_;
}
inline void MessageRelayRequest::set_channel_id(const ::std::string& value) {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(value);
}
inline void MessageRelayRequest::set_channel_id(const char* value) {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(value);
}
inline void MessageRelayRequest::set_channel_id(const char* value, size_t size) {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MessageRelayRequest::mutable_channel_id() {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_id_ = new ::std::string;
  }
  return channel_id_;
}
inline ::std::string* MessageRelayRequest::release_channel_id() {
  clear_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_id_;
    channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MessageRelayRequest::set_allocated_channel_id(::std::string* channel_id) {
  if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_id_;
  }
  if (channel_id) {
    set_has_channel_id();
    channel_id_ = channel_id;
  } else {
    clear_has_channel_id();
    channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .chattp.ChattpMessage mesg = 4;
inline bool MessageRelayRequest::has_mesg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MessageRelayRequest::set_has_mesg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MessageRelayRequest::clear_has_mesg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MessageRelayRequest::clear_mesg() {
  if (mesg_ != NULL) mesg_->::chattp::ChattpMessage::Clear();
  clear_has_mesg();
}
inline const ::chattp::ChattpMessage& MessageRelayRequest::mesg() const {
  return mesg_ != NULL ? *mesg_ : *default_instance_->mesg_;
}
inline ::chattp::ChattpMessage* MessageRelayRequest::mutable_mesg() {
  set_has_mesg();
  if (mesg_ == NULL) mesg_ = new ::chattp::ChattpMessage;
  return mesg_;
}
inline ::chattp::ChattpMessage* MessageRelayRequest::release_mesg() {
  clear_has_mesg();
  ::chattp::ChattpMessage* temp = mesg_;
  mesg_ = NULL;
  return temp;
}
inline void MessageRelayRequest::set_allocated_mesg(::chattp::ChattpMessage* mesg) {
  delete mesg_;
  mesg_ = mesg;
  if (mesg) {
    set_has_mesg();
  } else {
    clear_has_mesg();
  }
}

// -------------------------------------------------------------------

// MessageRelayResponse

// required uint64 sequence_number = 1;
inline bool MessageRelayResponse::has_sequence_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageRelayResponse::set_has_sequence_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageRelayResponse::clear_has_sequence_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageRelayResponse::clear_sequence_number() {
  sequence_number_ = GOOGLE_ULONGLONG(0);
  clear_has_sequence_number();
}
inline ::google::protobuf::uint64 MessageRelayResponse::sequence_number() const {
  return sequence_number_;
}
inline void MessageRelayResponse::set_sequence_number(::google::protobuf::uint64 value) {
  set_has_sequence_number();
  sequence_number_ = value;
}

// required .chattp.MessageRelayResponse.MessageRelayResponseType type = 2;
inline bool MessageRelayResponse::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageRelayResponse::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageRelayResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageRelayResponse::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::chattp::MessageRelayResponse_MessageRelayResponseType MessageRelayResponse::type() const {
  return static_cast< ::chattp::MessageRelayResponse_MessageRelayResponseType >(type_);
}
inline void MessageRelayResponse::set_type(::chattp::MessageRelayResponse_MessageRelayResponseType value) {
  assert(::chattp::MessageRelayResponse_MessageRelayResponseType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bool status = 3 [default = true];
inline bool MessageRelayResponse::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MessageRelayResponse::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MessageRelayResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MessageRelayResponse::clear_status() {
  status_ = true;
  clear_has_status();
}
inline bool MessageRelayResponse::status() const {
  return status_;
}
inline void MessageRelayResponse::set_status(bool value) {
  set_has_status();
  status_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace chattp

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chattp::MessageRelayRequest_MessageRelayRequestType>() {
  return ::chattp::MessageRelayRequest_MessageRelayRequestType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chattp::MessageRelayResponse_MessageRelayResponseType>() {
  return ::chattp::MessageRelayResponse_MessageRelayResponseType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messagerelay_2eproto__INCLUDED
