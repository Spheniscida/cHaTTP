// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webapp.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "webapp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace chattp {

namespace {

const ::google::protobuf::Descriptor* WebappRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebappRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* WebappRequest_WebappRequestType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* WebappResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebappResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* WebappResponse_WebappResponseType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_webapp_2eproto() {
  protobuf_AddDesc_webapp_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "webapp.proto");
  GOOGLE_CHECK(file != NULL);
  WebappRequest_descriptor_ = file->message_type(0);
  static const int WebappRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebappRequest, sequence_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebappRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebappRequest, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebappRequest, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebappRequest, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebappRequest, mesg_),
  };
  WebappRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WebappRequest_descriptor_,
      WebappRequest::default_instance_,
      WebappRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebappRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebappRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WebappRequest));
  WebappRequest_WebappRequestType_descriptor_ = WebappRequest_descriptor_->enum_type(0);
  WebappResponse_descriptor_ = file->message_type(1);
  static const int WebappResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebappResponse, sequence_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebappResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebappResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebappResponse, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebappResponse, authorized_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebappResponse, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebappResponse, mesgs_),
  };
  WebappResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WebappResponse_descriptor_,
      WebappResponse::default_instance_,
      WebappResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebappResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebappResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WebappResponse));
  WebappResponse_WebappResponseType_descriptor_ = WebappResponse_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_webapp_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WebappRequest_descriptor_, &WebappRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WebappResponse_descriptor_, &WebappResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_webapp_2eproto() {
  delete WebappRequest::default_instance_;
  delete WebappRequest_reflection_;
  delete WebappResponse::default_instance_;
  delete WebappResponse_reflection_;
}

void protobuf_AddDesc_webapp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::chattp::protobuf_AddDesc_message_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014webapp.proto\022\006chattp\032\rmessage.proto\"\272\002"
    "\n\rWebappRequest\022\027\n\017sequence_number\030\001 \002(\004"
    "\0225\n\004type\030\002 \002(\0162\'.chattp.WebappRequest.We"
    "bappRequestType\022\021\n\tuser_name\030\003 \001(\t\022\020\n\010pa"
    "ssword\030\004 \001(\t\022\022\n\nchannel_id\030\005 \001(\t\022#\n\004mesg"
    "\030\006 \001(\0132\025.chattp.ChattpMessage\"{\n\021WebappR"
    "equestType\022\014\n\010REGISTER\020\000\022\t\n\005LOGIN\020\001\022\n\n\006L"
    "OGOUT\020\002\022\017\n\013SENDMESSAGE\020\003\022\017\n\013QUERYSTATUS\020"
    "\004\022\017\n\013GETMESSAGES\020\005\022\016\n\nAUTHORIZED\020\006\"\334\002\n\016W"
    "ebappResponse\022\027\n\017sequence_number\030\001 \002(\004\0227"
    "\n\004type\030\002 \002(\0162).chattp.WebappResponse.Web"
    "appResponseType\022\024\n\006status\030\003 \001(\010:\004true\022\016\n"
    "\006online\030\004 \001(\010\022\022\n\nauthorized\030\005 \001(\010\022\022\n\ncha"
    "nnel_id\030\006 \001(\t\022$\n\005mesgs\030\007 \003(\0132\025.chattp.Ch"
    "attpMessage\"\203\001\n\022WebappResponseType\022\016\n\nRE"
    "GISTERED\020\000\022\014\n\010LOGGEDIN\020\001\022\r\n\tLOGGEDOUT\020\002\022"
    "\017\n\013SENTMESSAGE\020\003\022\016\n\nUSERSTATUS\020\004\022\017\n\013GOTM"
    "ESSAGES\020\005\022\016\n\nAUTHORIZED\020\006", 705);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "webapp.proto", &protobuf_RegisterTypes);
  WebappRequest::default_instance_ = new WebappRequest();
  WebappResponse::default_instance_ = new WebappResponse();
  WebappRequest::default_instance_->InitAsDefaultInstance();
  WebappResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_webapp_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_webapp_2eproto {
  StaticDescriptorInitializer_webapp_2eproto() {
    protobuf_AddDesc_webapp_2eproto();
  }
} static_descriptor_initializer_webapp_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* WebappRequest_WebappRequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebappRequest_WebappRequestType_descriptor_;
}
bool WebappRequest_WebappRequestType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const WebappRequest_WebappRequestType WebappRequest::REGISTER;
const WebappRequest_WebappRequestType WebappRequest::LOGIN;
const WebappRequest_WebappRequestType WebappRequest::LOGOUT;
const WebappRequest_WebappRequestType WebappRequest::SENDMESSAGE;
const WebappRequest_WebappRequestType WebappRequest::QUERYSTATUS;
const WebappRequest_WebappRequestType WebappRequest::GETMESSAGES;
const WebappRequest_WebappRequestType WebappRequest::AUTHORIZED;
const WebappRequest_WebappRequestType WebappRequest::WebappRequestType_MIN;
const WebappRequest_WebappRequestType WebappRequest::WebappRequestType_MAX;
const int WebappRequest::WebappRequestType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int WebappRequest::kSequenceNumberFieldNumber;
const int WebappRequest::kTypeFieldNumber;
const int WebappRequest::kUserNameFieldNumber;
const int WebappRequest::kPasswordFieldNumber;
const int WebappRequest::kChannelIdFieldNumber;
const int WebappRequest::kMesgFieldNumber;
#endif  // !_MSC_VER

WebappRequest::WebappRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WebappRequest::InitAsDefaultInstance() {
  mesg_ = const_cast< ::chattp::ChattpMessage*>(&::chattp::ChattpMessage::default_instance());
}

WebappRequest::WebappRequest(const WebappRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WebappRequest::SharedCtor() {
  _cached_size_ = 0;
  sequence_number_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mesg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebappRequest::~WebappRequest() {
  SharedDtor();
}

void WebappRequest::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_id_;
  }
  if (this != default_instance_) {
    delete mesg_;
  }
}

void WebappRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebappRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebappRequest_descriptor_;
}

const WebappRequest& WebappRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_webapp_2eproto();
  return *default_instance_;
}

WebappRequest* WebappRequest::default_instance_ = NULL;

WebappRequest* WebappRequest::New() const {
  return new WebappRequest;
}

void WebappRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sequence_number_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_channel_id()) {
      if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_id_->clear();
      }
    }
    if (has_mesg()) {
      if (mesg_ != NULL) mesg_->::chattp::ChattpMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WebappRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 sequence_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sequence_number_)));
          set_has_sequence_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .chattp.WebappRequest.WebappRequestType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chattp::WebappRequest_WebappRequestType_IsValid(value)) {
            set_type(static_cast< ::chattp::WebappRequest_WebappRequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_name;
        break;
      }

      // optional string user_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }

      // optional string password = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_channel_id;
        break;
      }

      // optional string channel_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_id().data(), this->channel_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_mesg;
        break;
      }

      // optional .chattp.ChattpMessage mesg = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mesg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mesg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WebappRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 sequence_number = 1;
  if (has_sequence_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sequence_number(), output);
  }

  // required .chattp.WebappRequest.WebappRequestType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user_name(), output);
  }

  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->password(), output);
  }

  // optional string channel_id = 5;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->channel_id(), output);
  }

  // optional .chattp.ChattpMessage mesg = 6;
  if (has_mesg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->mesg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WebappRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 sequence_number = 1;
  if (has_sequence_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sequence_number(), target);
  }

  // required .chattp.WebappRequest.WebappRequestType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_name(), target);
  }

  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }

  // optional string channel_id = 5;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->channel_id(), target);
  }

  // optional .chattp.ChattpMessage mesg = 6;
  if (has_mesg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->mesg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WebappRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 sequence_number = 1;
    if (has_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sequence_number());
    }

    // required .chattp.WebappRequest.WebappRequestType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string user_name = 3;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional string password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string channel_id = 5;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_id());
    }

    // optional .chattp.ChattpMessage mesg = 6;
    if (has_mesg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mesg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebappRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WebappRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebappRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebappRequest::MergeFrom(const WebappRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequence_number()) {
      set_sequence_number(from.sequence_number());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_mesg()) {
      mutable_mesg()->::chattp::ChattpMessage::MergeFrom(from.mesg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WebappRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebappRequest::CopyFrom(const WebappRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebappRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_mesg()) {
    if (!this->mesg().IsInitialized()) return false;
  }
  return true;
}

void WebappRequest::Swap(WebappRequest* other) {
  if (other != this) {
    std::swap(sequence_number_, other->sequence_number_);
    std::swap(type_, other->type_);
    std::swap(user_name_, other->user_name_);
    std::swap(password_, other->password_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(mesg_, other->mesg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WebappRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebappRequest_descriptor_;
  metadata.reflection = WebappRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* WebappResponse_WebappResponseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebappResponse_WebappResponseType_descriptor_;
}
bool WebappResponse_WebappResponseType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const WebappResponse_WebappResponseType WebappResponse::REGISTERED;
const WebappResponse_WebappResponseType WebappResponse::LOGGEDIN;
const WebappResponse_WebappResponseType WebappResponse::LOGGEDOUT;
const WebappResponse_WebappResponseType WebappResponse::SENTMESSAGE;
const WebappResponse_WebappResponseType WebappResponse::USERSTATUS;
const WebappResponse_WebappResponseType WebappResponse::GOTMESSAGES;
const WebappResponse_WebappResponseType WebappResponse::AUTHORIZED;
const WebappResponse_WebappResponseType WebappResponse::WebappResponseType_MIN;
const WebappResponse_WebappResponseType WebappResponse::WebappResponseType_MAX;
const int WebappResponse::WebappResponseType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int WebappResponse::kSequenceNumberFieldNumber;
const int WebappResponse::kTypeFieldNumber;
const int WebappResponse::kStatusFieldNumber;
const int WebappResponse::kOnlineFieldNumber;
const int WebappResponse::kAuthorizedFieldNumber;
const int WebappResponse::kChannelIdFieldNumber;
const int WebappResponse::kMesgsFieldNumber;
#endif  // !_MSC_VER

WebappResponse::WebappResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WebappResponse::InitAsDefaultInstance() {
}

WebappResponse::WebappResponse(const WebappResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WebappResponse::SharedCtor() {
  _cached_size_ = 0;
  sequence_number_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  status_ = true;
  online_ = false;
  authorized_ = false;
  channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebappResponse::~WebappResponse() {
  SharedDtor();
}

void WebappResponse::SharedDtor() {
  if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_id_;
  }
  if (this != default_instance_) {
  }
}

void WebappResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebappResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebappResponse_descriptor_;
}

const WebappResponse& WebappResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_webapp_2eproto();
  return *default_instance_;
}

WebappResponse* WebappResponse::default_instance_ = NULL;

WebappResponse* WebappResponse::New() const {
  return new WebappResponse;
}

void WebappResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sequence_number_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
    status_ = true;
    online_ = false;
    authorized_ = false;
    if (has_channel_id()) {
      if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_id_->clear();
      }
    }
  }
  mesgs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WebappResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 sequence_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sequence_number_)));
          set_has_sequence_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .chattp.WebappResponse.WebappResponseType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chattp::WebappResponse_WebappResponseType_IsValid(value)) {
            set_type(static_cast< ::chattp::WebappResponse_WebappResponseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional bool status = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_online;
        break;
      }

      // optional bool online = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_authorized;
        break;
      }

      // optional bool authorized = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_authorized:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &authorized_)));
          set_has_authorized();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_channel_id;
        break;
      }

      // optional string channel_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_id().data(), this->channel_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_mesgs;
        break;
      }

      // repeated .chattp.ChattpMessage mesgs = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mesgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mesgs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_mesgs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WebappResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 sequence_number = 1;
  if (has_sequence_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sequence_number(), output);
  }

  // required .chattp.WebappResponse.WebappResponseType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional bool status = 3 [default = true];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->status(), output);
  }

  // optional bool online = 4;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->online(), output);
  }

  // optional bool authorized = 5;
  if (has_authorized()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->authorized(), output);
  }

  // optional string channel_id = 6;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->channel_id(), output);
  }

  // repeated .chattp.ChattpMessage mesgs = 7;
  for (int i = 0; i < this->mesgs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->mesgs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WebappResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 sequence_number = 1;
  if (has_sequence_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sequence_number(), target);
  }

  // required .chattp.WebappResponse.WebappResponseType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional bool status = 3 [default = true];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->status(), target);
  }

  // optional bool online = 4;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->online(), target);
  }

  // optional bool authorized = 5;
  if (has_authorized()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->authorized(), target);
  }

  // optional string channel_id = 6;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->channel_id(), target);
  }

  // repeated .chattp.ChattpMessage mesgs = 7;
  for (int i = 0; i < this->mesgs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->mesgs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WebappResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 sequence_number = 1;
    if (has_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sequence_number());
    }

    // required .chattp.WebappResponse.WebappResponseType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool status = 3 [default = true];
    if (has_status()) {
      total_size += 1 + 1;
    }

    // optional bool online = 4;
    if (has_online()) {
      total_size += 1 + 1;
    }

    // optional bool authorized = 5;
    if (has_authorized()) {
      total_size += 1 + 1;
    }

    // optional string channel_id = 6;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_id());
    }

  }
  // repeated .chattp.ChattpMessage mesgs = 7;
  total_size += 1 * this->mesgs_size();
  for (int i = 0; i < this->mesgs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mesgs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebappResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WebappResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebappResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebappResponse::MergeFrom(const WebappResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mesgs_.MergeFrom(from.mesgs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequence_number()) {
      set_sequence_number(from.sequence_number());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_authorized()) {
      set_authorized(from.authorized());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WebappResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebappResponse::CopyFrom(const WebappResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebappResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < mesgs_size(); i++) {
    if (!this->mesgs(i).IsInitialized()) return false;
  }
  return true;
}

void WebappResponse::Swap(WebappResponse* other) {
  if (other != this) {
    std::swap(sequence_number_, other->sequence_number_);
    std::swap(type_, other->type_);
    std::swap(status_, other->status_);
    std::swap(online_, other->online_);
    std::swap(authorized_, other->authorized_);
    std::swap(channel_id_, other->channel_id_);
    mesgs_.Swap(&other->mesgs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WebappResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebappResponse_descriptor_;
  metadata.reflection = WebappResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace chattp

// @@protoc_insertion_point(global_scope)
