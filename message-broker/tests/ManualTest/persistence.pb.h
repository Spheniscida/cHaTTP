// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: persistence.proto

#ifndef PROTOBUF_persistence_2eproto__INCLUDED
#define PROTOBUF_persistence_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "message.pb.h"
// @@protoc_insertion_point(includes)

namespace chattp {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_persistence_2eproto();
void protobuf_AssignDesc_persistence_2eproto();
void protobuf_ShutdownFile_persistence_2eproto();

class PersistenceRequest;
class PersistenceResponse;
class PersistenceResponse_UserLocation;

enum PersistenceRequest_PersistenceRequestType {
  PersistenceRequest_PersistenceRequestType_REGISTER = 0,
  PersistenceRequest_PersistenceRequestType_LOGIN = 1,
  PersistenceRequest_PersistenceRequestType_LOGOUT = 2,
  PersistenceRequest_PersistenceRequestType_CHECKPASS = 3,
  PersistenceRequest_PersistenceRequestType_LOOKUP = 4,
  PersistenceRequest_PersistenceRequestType_SAVEMESSAGE = 5,
  PersistenceRequest_PersistenceRequestType_GETMESSAGES = 6
};
bool PersistenceRequest_PersistenceRequestType_IsValid(int value);
const PersistenceRequest_PersistenceRequestType PersistenceRequest_PersistenceRequestType_PersistenceRequestType_MIN = PersistenceRequest_PersistenceRequestType_REGISTER;
const PersistenceRequest_PersistenceRequestType PersistenceRequest_PersistenceRequestType_PersistenceRequestType_MAX = PersistenceRequest_PersistenceRequestType_GETMESSAGES;
const int PersistenceRequest_PersistenceRequestType_PersistenceRequestType_ARRAYSIZE = PersistenceRequest_PersistenceRequestType_PersistenceRequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PersistenceRequest_PersistenceRequestType_descriptor();
inline const ::std::string& PersistenceRequest_PersistenceRequestType_Name(PersistenceRequest_PersistenceRequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PersistenceRequest_PersistenceRequestType_descriptor(), value);
}
inline bool PersistenceRequest_PersistenceRequestType_Parse(
    const ::std::string& name, PersistenceRequest_PersistenceRequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PersistenceRequest_PersistenceRequestType>(
    PersistenceRequest_PersistenceRequestType_descriptor(), name, value);
}
enum PersistenceResponse_PersistenceResponseType {
  PersistenceResponse_PersistenceResponseType_REGISTERED = 0,
  PersistenceResponse_PersistenceResponseType_LOGGEDIN = 1,
  PersistenceResponse_PersistenceResponseType_LOGGEDOUT = 2,
  PersistenceResponse_PersistenceResponseType_CHECKEDPASS = 3,
  PersistenceResponse_PersistenceResponseType_LOOKEDUP = 4,
  PersistenceResponse_PersistenceResponseType_SAVEDMESSAGE = 5,
  PersistenceResponse_PersistenceResponseType_GOTMESSAGES = 6
};
bool PersistenceResponse_PersistenceResponseType_IsValid(int value);
const PersistenceResponse_PersistenceResponseType PersistenceResponse_PersistenceResponseType_PersistenceResponseType_MIN = PersistenceResponse_PersistenceResponseType_REGISTERED;
const PersistenceResponse_PersistenceResponseType PersistenceResponse_PersistenceResponseType_PersistenceResponseType_MAX = PersistenceResponse_PersistenceResponseType_GOTMESSAGES;
const int PersistenceResponse_PersistenceResponseType_PersistenceResponseType_ARRAYSIZE = PersistenceResponse_PersistenceResponseType_PersistenceResponseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PersistenceResponse_PersistenceResponseType_descriptor();
inline const ::std::string& PersistenceResponse_PersistenceResponseType_Name(PersistenceResponse_PersistenceResponseType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PersistenceResponse_PersistenceResponseType_descriptor(), value);
}
inline bool PersistenceResponse_PersistenceResponseType_Parse(
    const ::std::string& name, PersistenceResponse_PersistenceResponseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PersistenceResponse_PersistenceResponseType>(
    PersistenceResponse_PersistenceResponseType_descriptor(), name, value);
}
// ===================================================================

class PersistenceRequest : public ::google::protobuf::Message {
 public:
  PersistenceRequest();
  virtual ~PersistenceRequest();

  PersistenceRequest(const PersistenceRequest& from);

  inline PersistenceRequest& operator=(const PersistenceRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PersistenceRequest& default_instance();

  void Swap(PersistenceRequest* other);

  // implements Message ----------------------------------------------

  PersistenceRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PersistenceRequest& from);
  void MergeFrom(const PersistenceRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PersistenceRequest_PersistenceRequestType PersistenceRequestType;
  static const PersistenceRequestType REGISTER = PersistenceRequest_PersistenceRequestType_REGISTER;
  static const PersistenceRequestType LOGIN = PersistenceRequest_PersistenceRequestType_LOGIN;
  static const PersistenceRequestType LOGOUT = PersistenceRequest_PersistenceRequestType_LOGOUT;
  static const PersistenceRequestType CHECKPASS = PersistenceRequest_PersistenceRequestType_CHECKPASS;
  static const PersistenceRequestType LOOKUP = PersistenceRequest_PersistenceRequestType_LOOKUP;
  static const PersistenceRequestType SAVEMESSAGE = PersistenceRequest_PersistenceRequestType_SAVEMESSAGE;
  static const PersistenceRequestType GETMESSAGES = PersistenceRequest_PersistenceRequestType_GETMESSAGES;
  static inline bool PersistenceRequestType_IsValid(int value) {
    return PersistenceRequest_PersistenceRequestType_IsValid(value);
  }
  static const PersistenceRequestType PersistenceRequestType_MIN =
    PersistenceRequest_PersistenceRequestType_PersistenceRequestType_MIN;
  static const PersistenceRequestType PersistenceRequestType_MAX =
    PersistenceRequest_PersistenceRequestType_PersistenceRequestType_MAX;
  static const int PersistenceRequestType_ARRAYSIZE =
    PersistenceRequest_PersistenceRequestType_PersistenceRequestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PersistenceRequestType_descriptor() {
    return PersistenceRequest_PersistenceRequestType_descriptor();
  }
  static inline const ::std::string& PersistenceRequestType_Name(PersistenceRequestType value) {
    return PersistenceRequest_PersistenceRequestType_Name(value);
  }
  static inline bool PersistenceRequestType_Parse(const ::std::string& name,
      PersistenceRequestType* value) {
    return PersistenceRequest_PersistenceRequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint64 sequence_number = 1;
  inline bool has_sequence_number() const;
  inline void clear_sequence_number();
  static const int kSequenceNumberFieldNumber = 1;
  inline ::google::protobuf::uint64 sequence_number() const;
  inline void set_sequence_number(::google::protobuf::uint64 value);

  // required .chattp.PersistenceRequest.PersistenceRequestType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::chattp::PersistenceRequest_PersistenceRequestType type() const;
  inline void set_type(::chattp::PersistenceRequest_PersistenceRequestType value);

  // optional string user_name = 3;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 3;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional string password = 4;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 4;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional string channel_id = 5;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 5;
  inline const ::std::string& channel_id() const;
  inline void set_channel_id(const ::std::string& value);
  inline void set_channel_id(const char* value);
  inline void set_channel_id(const char* value, size_t size);
  inline ::std::string* mutable_channel_id();
  inline ::std::string* release_channel_id();
  inline void set_allocated_channel_id(::std::string* channel_id);

  // optional string broker_name = 6;
  inline bool has_broker_name() const;
  inline void clear_broker_name();
  static const int kBrokerNameFieldNumber = 6;
  inline const ::std::string& broker_name() const;
  inline void set_broker_name(const ::std::string& value);
  inline void set_broker_name(const char* value);
  inline void set_broker_name(const char* value, size_t size);
  inline ::std::string* mutable_broker_name();
  inline ::std::string* release_broker_name();
  inline void set_allocated_broker_name(::std::string* broker_name);

  // repeated string user_names = 7;
  inline int user_names_size() const;
  inline void clear_user_names();
  static const int kUserNamesFieldNumber = 7;
  inline const ::std::string& user_names(int index) const;
  inline ::std::string* mutable_user_names(int index);
  inline void set_user_names(int index, const ::std::string& value);
  inline void set_user_names(int index, const char* value);
  inline void set_user_names(int index, const char* value, size_t size);
  inline ::std::string* add_user_names();
  inline void add_user_names(const ::std::string& value);
  inline void add_user_names(const char* value);
  inline void add_user_names(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& user_names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_user_names();

  // optional .chattp.ChattpMessage mesg = 8;
  inline bool has_mesg() const;
  inline void clear_mesg();
  static const int kMesgFieldNumber = 8;
  inline const ::chattp::ChattpMessage& mesg() const;
  inline ::chattp::ChattpMessage* mutable_mesg();
  inline ::chattp::ChattpMessage* release_mesg();
  inline void set_allocated_mesg(::chattp::ChattpMessage* mesg);

  // @@protoc_insertion_point(class_scope:chattp.PersistenceRequest)
 private:
  inline void set_has_sequence_number();
  inline void clear_has_sequence_number();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_broker_name();
  inline void clear_has_broker_name();
  inline void set_has_mesg();
  inline void clear_has_mesg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 sequence_number_;
  ::std::string* user_name_;
  ::std::string* password_;
  ::std::string* channel_id_;
  ::std::string* broker_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> user_names_;
  ::chattp::ChattpMessage* mesg_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_persistence_2eproto();
  friend void protobuf_AssignDesc_persistence_2eproto();
  friend void protobuf_ShutdownFile_persistence_2eproto();

  void InitAsDefaultInstance();
  static PersistenceRequest* default_instance_;
};
// -------------------------------------------------------------------

class PersistenceResponse_UserLocation : public ::google::protobuf::Message {
 public:
  PersistenceResponse_UserLocation();
  virtual ~PersistenceResponse_UserLocation();

  PersistenceResponse_UserLocation(const PersistenceResponse_UserLocation& from);

  inline PersistenceResponse_UserLocation& operator=(const PersistenceResponse_UserLocation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PersistenceResponse_UserLocation& default_instance();

  void Swap(PersistenceResponse_UserLocation* other);

  // implements Message ----------------------------------------------

  PersistenceResponse_UserLocation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PersistenceResponse_UserLocation& from);
  void MergeFrom(const PersistenceResponse_UserLocation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool online = 1 [default = true];
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 1;
  inline bool online() const;
  inline void set_online(bool value);

  // required string user_name = 2;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 2;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // required string broker_name = 3;
  inline bool has_broker_name() const;
  inline void clear_broker_name();
  static const int kBrokerNameFieldNumber = 3;
  inline const ::std::string& broker_name() const;
  inline void set_broker_name(const ::std::string& value);
  inline void set_broker_name(const char* value);
  inline void set_broker_name(const char* value, size_t size);
  inline ::std::string* mutable_broker_name();
  inline ::std::string* release_broker_name();
  inline void set_allocated_broker_name(::std::string* broker_name);

  // required string channel_id = 4;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 4;
  inline const ::std::string& channel_id() const;
  inline void set_channel_id(const ::std::string& value);
  inline void set_channel_id(const char* value);
  inline void set_channel_id(const char* value, size_t size);
  inline ::std::string* mutable_channel_id();
  inline ::std::string* release_channel_id();
  inline void set_allocated_channel_id(::std::string* channel_id);

  // @@protoc_insertion_point(class_scope:chattp.PersistenceResponse.UserLocation)
 private:
  inline void set_has_online();
  inline void clear_has_online();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_broker_name();
  inline void clear_has_broker_name();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_name_;
  ::std::string* broker_name_;
  ::std::string* channel_id_;
  bool online_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_persistence_2eproto();
  friend void protobuf_AssignDesc_persistence_2eproto();
  friend void protobuf_ShutdownFile_persistence_2eproto();

  void InitAsDefaultInstance();
  static PersistenceResponse_UserLocation* default_instance_;
};
// -------------------------------------------------------------------

class PersistenceResponse : public ::google::protobuf::Message {
 public:
  PersistenceResponse();
  virtual ~PersistenceResponse();

  PersistenceResponse(const PersistenceResponse& from);

  inline PersistenceResponse& operator=(const PersistenceResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PersistenceResponse& default_instance();

  void Swap(PersistenceResponse* other);

  // implements Message ----------------------------------------------

  PersistenceResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PersistenceResponse& from);
  void MergeFrom(const PersistenceResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PersistenceResponse_UserLocation UserLocation;

  typedef PersistenceResponse_PersistenceResponseType PersistenceResponseType;
  static const PersistenceResponseType REGISTERED = PersistenceResponse_PersistenceResponseType_REGISTERED;
  static const PersistenceResponseType LOGGEDIN = PersistenceResponse_PersistenceResponseType_LOGGEDIN;
  static const PersistenceResponseType LOGGEDOUT = PersistenceResponse_PersistenceResponseType_LOGGEDOUT;
  static const PersistenceResponseType CHECKEDPASS = PersistenceResponse_PersistenceResponseType_CHECKEDPASS;
  static const PersistenceResponseType LOOKEDUP = PersistenceResponse_PersistenceResponseType_LOOKEDUP;
  static const PersistenceResponseType SAVEDMESSAGE = PersistenceResponse_PersistenceResponseType_SAVEDMESSAGE;
  static const PersistenceResponseType GOTMESSAGES = PersistenceResponse_PersistenceResponseType_GOTMESSAGES;
  static inline bool PersistenceResponseType_IsValid(int value) {
    return PersistenceResponse_PersistenceResponseType_IsValid(value);
  }
  static const PersistenceResponseType PersistenceResponseType_MIN =
    PersistenceResponse_PersistenceResponseType_PersistenceResponseType_MIN;
  static const PersistenceResponseType PersistenceResponseType_MAX =
    PersistenceResponse_PersistenceResponseType_PersistenceResponseType_MAX;
  static const int PersistenceResponseType_ARRAYSIZE =
    PersistenceResponse_PersistenceResponseType_PersistenceResponseType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PersistenceResponseType_descriptor() {
    return PersistenceResponse_PersistenceResponseType_descriptor();
  }
  static inline const ::std::string& PersistenceResponseType_Name(PersistenceResponseType value) {
    return PersistenceResponse_PersistenceResponseType_Name(value);
  }
  static inline bool PersistenceResponseType_Parse(const ::std::string& name,
      PersistenceResponseType* value) {
    return PersistenceResponse_PersistenceResponseType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint64 sequence_number = 1;
  inline bool has_sequence_number() const;
  inline void clear_sequence_number();
  static const int kSequenceNumberFieldNumber = 1;
  inline ::google::protobuf::uint64 sequence_number() const;
  inline void set_sequence_number(::google::protobuf::uint64 value);

  // required .chattp.PersistenceResponse.PersistenceResponseType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::chattp::PersistenceResponse_PersistenceResponseType type() const;
  inline void set_type(::chattp::PersistenceResponse_PersistenceResponseType value);

  // optional bool status = 3 [default = true];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline bool status() const;
  inline void set_status(bool value);

  // repeated .chattp.PersistenceResponse.UserLocation user_locations = 4;
  inline int user_locations_size() const;
  inline void clear_user_locations();
  static const int kUserLocationsFieldNumber = 4;
  inline const ::chattp::PersistenceResponse_UserLocation& user_locations(int index) const;
  inline ::chattp::PersistenceResponse_UserLocation* mutable_user_locations(int index);
  inline ::chattp::PersistenceResponse_UserLocation* add_user_locations();
  inline const ::google::protobuf::RepeatedPtrField< ::chattp::PersistenceResponse_UserLocation >&
      user_locations() const;
  inline ::google::protobuf::RepeatedPtrField< ::chattp::PersistenceResponse_UserLocation >*
      mutable_user_locations();

  // repeated .chattp.ChattpMessage mesgs = 5;
  inline int mesgs_size() const;
  inline void clear_mesgs();
  static const int kMesgsFieldNumber = 5;
  inline const ::chattp::ChattpMessage& mesgs(int index) const;
  inline ::chattp::ChattpMessage* mutable_mesgs(int index);
  inline ::chattp::ChattpMessage* add_mesgs();
  inline const ::google::protobuf::RepeatedPtrField< ::chattp::ChattpMessage >&
      mesgs() const;
  inline ::google::protobuf::RepeatedPtrField< ::chattp::ChattpMessage >*
      mutable_mesgs();

  // @@protoc_insertion_point(class_scope:chattp.PersistenceResponse)
 private:
  inline void set_has_sequence_number();
  inline void clear_has_sequence_number();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 sequence_number_;
  int type_;
  bool status_;
  ::google::protobuf::RepeatedPtrField< ::chattp::PersistenceResponse_UserLocation > user_locations_;
  ::google::protobuf::RepeatedPtrField< ::chattp::ChattpMessage > mesgs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_persistence_2eproto();
  friend void protobuf_AssignDesc_persistence_2eproto();
  friend void protobuf_ShutdownFile_persistence_2eproto();

  void InitAsDefaultInstance();
  static PersistenceResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// PersistenceRequest

// required uint64 sequence_number = 1;
inline bool PersistenceRequest::has_sequence_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PersistenceRequest::set_has_sequence_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PersistenceRequest::clear_has_sequence_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PersistenceRequest::clear_sequence_number() {
  sequence_number_ = GOOGLE_ULONGLONG(0);
  clear_has_sequence_number();
}
inline ::google::protobuf::uint64 PersistenceRequest::sequence_number() const {
  return sequence_number_;
}
inline void PersistenceRequest::set_sequence_number(::google::protobuf::uint64 value) {
  set_has_sequence_number();
  sequence_number_ = value;
}

// required .chattp.PersistenceRequest.PersistenceRequestType type = 2;
inline bool PersistenceRequest::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PersistenceRequest::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PersistenceRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PersistenceRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::chattp::PersistenceRequest_PersistenceRequestType PersistenceRequest::type() const {
  return static_cast< ::chattp::PersistenceRequest_PersistenceRequestType >(type_);
}
inline void PersistenceRequest::set_type(::chattp::PersistenceRequest_PersistenceRequestType value) {
  assert(::chattp::PersistenceRequest_PersistenceRequestType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string user_name = 3;
inline bool PersistenceRequest::has_user_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PersistenceRequest::set_has_user_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PersistenceRequest::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PersistenceRequest::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& PersistenceRequest::user_name() const {
  return *user_name_;
}
inline void PersistenceRequest::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void PersistenceRequest::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void PersistenceRequest::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PersistenceRequest::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* PersistenceRequest::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PersistenceRequest::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string password = 4;
inline bool PersistenceRequest::has_password() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PersistenceRequest::set_has_password() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PersistenceRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PersistenceRequest::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& PersistenceRequest::password() const {
  return *password_;
}
inline void PersistenceRequest::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void PersistenceRequest::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void PersistenceRequest::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PersistenceRequest::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* PersistenceRequest::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PersistenceRequest::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string channel_id = 5;
inline bool PersistenceRequest::has_channel_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PersistenceRequest::set_has_channel_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PersistenceRequest::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PersistenceRequest::clear_channel_id() {
  if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
    channel_id_->clear();
  }
  clear_has_channel_id();
}
inline const ::std::string& PersistenceRequest::channel_id() const {
  return *channel_id_;
}
inline void PersistenceRequest::set_channel_id(const ::std::string& value) {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(value);
}
inline void PersistenceRequest::set_channel_id(const char* value) {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(value);
}
inline void PersistenceRequest::set_channel_id(const char* value, size_t size) {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PersistenceRequest::mutable_channel_id() {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_id_ = new ::std::string;
  }
  return channel_id_;
}
inline ::std::string* PersistenceRequest::release_channel_id() {
  clear_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_id_;
    channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PersistenceRequest::set_allocated_channel_id(::std::string* channel_id) {
  if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_id_;
  }
  if (channel_id) {
    set_has_channel_id();
    channel_id_ = channel_id;
  } else {
    clear_has_channel_id();
    channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string broker_name = 6;
inline bool PersistenceRequest::has_broker_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PersistenceRequest::set_has_broker_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PersistenceRequest::clear_has_broker_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PersistenceRequest::clear_broker_name() {
  if (broker_name_ != &::google::protobuf::internal::kEmptyString) {
    broker_name_->clear();
  }
  clear_has_broker_name();
}
inline const ::std::string& PersistenceRequest::broker_name() const {
  return *broker_name_;
}
inline void PersistenceRequest::set_broker_name(const ::std::string& value) {
  set_has_broker_name();
  if (broker_name_ == &::google::protobuf::internal::kEmptyString) {
    broker_name_ = new ::std::string;
  }
  broker_name_->assign(value);
}
inline void PersistenceRequest::set_broker_name(const char* value) {
  set_has_broker_name();
  if (broker_name_ == &::google::protobuf::internal::kEmptyString) {
    broker_name_ = new ::std::string;
  }
  broker_name_->assign(value);
}
inline void PersistenceRequest::set_broker_name(const char* value, size_t size) {
  set_has_broker_name();
  if (broker_name_ == &::google::protobuf::internal::kEmptyString) {
    broker_name_ = new ::std::string;
  }
  broker_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PersistenceRequest::mutable_broker_name() {
  set_has_broker_name();
  if (broker_name_ == &::google::protobuf::internal::kEmptyString) {
    broker_name_ = new ::std::string;
  }
  return broker_name_;
}
inline ::std::string* PersistenceRequest::release_broker_name() {
  clear_has_broker_name();
  if (broker_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = broker_name_;
    broker_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PersistenceRequest::set_allocated_broker_name(::std::string* broker_name) {
  if (broker_name_ != &::google::protobuf::internal::kEmptyString) {
    delete broker_name_;
  }
  if (broker_name) {
    set_has_broker_name();
    broker_name_ = broker_name;
  } else {
    clear_has_broker_name();
    broker_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string user_names = 7;
inline int PersistenceRequest::user_names_size() const {
  return user_names_.size();
}
inline void PersistenceRequest::clear_user_names() {
  user_names_.Clear();
}
inline const ::std::string& PersistenceRequest::user_names(int index) const {
  return user_names_.Get(index);
}
inline ::std::string* PersistenceRequest::mutable_user_names(int index) {
  return user_names_.Mutable(index);
}
inline void PersistenceRequest::set_user_names(int index, const ::std::string& value) {
  user_names_.Mutable(index)->assign(value);
}
inline void PersistenceRequest::set_user_names(int index, const char* value) {
  user_names_.Mutable(index)->assign(value);
}
inline void PersistenceRequest::set_user_names(int index, const char* value, size_t size) {
  user_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PersistenceRequest::add_user_names() {
  return user_names_.Add();
}
inline void PersistenceRequest::add_user_names(const ::std::string& value) {
  user_names_.Add()->assign(value);
}
inline void PersistenceRequest::add_user_names(const char* value) {
  user_names_.Add()->assign(value);
}
inline void PersistenceRequest::add_user_names(const char* value, size_t size) {
  user_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PersistenceRequest::user_names() const {
  return user_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PersistenceRequest::mutable_user_names() {
  return &user_names_;
}

// optional .chattp.ChattpMessage mesg = 8;
inline bool PersistenceRequest::has_mesg() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PersistenceRequest::set_has_mesg() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PersistenceRequest::clear_has_mesg() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PersistenceRequest::clear_mesg() {
  if (mesg_ != NULL) mesg_->::chattp::ChattpMessage::Clear();
  clear_has_mesg();
}
inline const ::chattp::ChattpMessage& PersistenceRequest::mesg() const {
  return mesg_ != NULL ? *mesg_ : *default_instance_->mesg_;
}
inline ::chattp::ChattpMessage* PersistenceRequest::mutable_mesg() {
  set_has_mesg();
  if (mesg_ == NULL) mesg_ = new ::chattp::ChattpMessage;
  return mesg_;
}
inline ::chattp::ChattpMessage* PersistenceRequest::release_mesg() {
  clear_has_mesg();
  ::chattp::ChattpMessage* temp = mesg_;
  mesg_ = NULL;
  return temp;
}
inline void PersistenceRequest::set_allocated_mesg(::chattp::ChattpMessage* mesg) {
  delete mesg_;
  mesg_ = mesg;
  if (mesg) {
    set_has_mesg();
  } else {
    clear_has_mesg();
  }
}

// -------------------------------------------------------------------

// PersistenceResponse_UserLocation

// optional bool online = 1 [default = true];
inline bool PersistenceResponse_UserLocation::has_online() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PersistenceResponse_UserLocation::set_has_online() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PersistenceResponse_UserLocation::clear_has_online() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PersistenceResponse_UserLocation::clear_online() {
  online_ = true;
  clear_has_online();
}
inline bool PersistenceResponse_UserLocation::online() const {
  return online_;
}
inline void PersistenceResponse_UserLocation::set_online(bool value) {
  set_has_online();
  online_ = value;
}

// required string user_name = 2;
inline bool PersistenceResponse_UserLocation::has_user_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PersistenceResponse_UserLocation::set_has_user_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PersistenceResponse_UserLocation::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PersistenceResponse_UserLocation::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& PersistenceResponse_UserLocation::user_name() const {
  return *user_name_;
}
inline void PersistenceResponse_UserLocation::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void PersistenceResponse_UserLocation::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void PersistenceResponse_UserLocation::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PersistenceResponse_UserLocation::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* PersistenceResponse_UserLocation::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PersistenceResponse_UserLocation::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string broker_name = 3;
inline bool PersistenceResponse_UserLocation::has_broker_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PersistenceResponse_UserLocation::set_has_broker_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PersistenceResponse_UserLocation::clear_has_broker_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PersistenceResponse_UserLocation::clear_broker_name() {
  if (broker_name_ != &::google::protobuf::internal::kEmptyString) {
    broker_name_->clear();
  }
  clear_has_broker_name();
}
inline const ::std::string& PersistenceResponse_UserLocation::broker_name() const {
  return *broker_name_;
}
inline void PersistenceResponse_UserLocation::set_broker_name(const ::std::string& value) {
  set_has_broker_name();
  if (broker_name_ == &::google::protobuf::internal::kEmptyString) {
    broker_name_ = new ::std::string;
  }
  broker_name_->assign(value);
}
inline void PersistenceResponse_UserLocation::set_broker_name(const char* value) {
  set_has_broker_name();
  if (broker_name_ == &::google::protobuf::internal::kEmptyString) {
    broker_name_ = new ::std::string;
  }
  broker_name_->assign(value);
}
inline void PersistenceResponse_UserLocation::set_broker_name(const char* value, size_t size) {
  set_has_broker_name();
  if (broker_name_ == &::google::protobuf::internal::kEmptyString) {
    broker_name_ = new ::std::string;
  }
  broker_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PersistenceResponse_UserLocation::mutable_broker_name() {
  set_has_broker_name();
  if (broker_name_ == &::google::protobuf::internal::kEmptyString) {
    broker_name_ = new ::std::string;
  }
  return broker_name_;
}
inline ::std::string* PersistenceResponse_UserLocation::release_broker_name() {
  clear_has_broker_name();
  if (broker_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = broker_name_;
    broker_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PersistenceResponse_UserLocation::set_allocated_broker_name(::std::string* broker_name) {
  if (broker_name_ != &::google::protobuf::internal::kEmptyString) {
    delete broker_name_;
  }
  if (broker_name) {
    set_has_broker_name();
    broker_name_ = broker_name;
  } else {
    clear_has_broker_name();
    broker_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string channel_id = 4;
inline bool PersistenceResponse_UserLocation::has_channel_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PersistenceResponse_UserLocation::set_has_channel_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PersistenceResponse_UserLocation::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PersistenceResponse_UserLocation::clear_channel_id() {
  if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
    channel_id_->clear();
  }
  clear_has_channel_id();
}
inline const ::std::string& PersistenceResponse_UserLocation::channel_id() const {
  return *channel_id_;
}
inline void PersistenceResponse_UserLocation::set_channel_id(const ::std::string& value) {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(value);
}
inline void PersistenceResponse_UserLocation::set_channel_id(const char* value) {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(value);
}
inline void PersistenceResponse_UserLocation::set_channel_id(const char* value, size_t size) {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PersistenceResponse_UserLocation::mutable_channel_id() {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_id_ = new ::std::string;
  }
  return channel_id_;
}
inline ::std::string* PersistenceResponse_UserLocation::release_channel_id() {
  clear_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_id_;
    channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PersistenceResponse_UserLocation::set_allocated_channel_id(::std::string* channel_id) {
  if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_id_;
  }
  if (channel_id) {
    set_has_channel_id();
    channel_id_ = channel_id;
  } else {
    clear_has_channel_id();
    channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PersistenceResponse

// required uint64 sequence_number = 1;
inline bool PersistenceResponse::has_sequence_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PersistenceResponse::set_has_sequence_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PersistenceResponse::clear_has_sequence_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PersistenceResponse::clear_sequence_number() {
  sequence_number_ = GOOGLE_ULONGLONG(0);
  clear_has_sequence_number();
}
inline ::google::protobuf::uint64 PersistenceResponse::sequence_number() const {
  return sequence_number_;
}
inline void PersistenceResponse::set_sequence_number(::google::protobuf::uint64 value) {
  set_has_sequence_number();
  sequence_number_ = value;
}

// required .chattp.PersistenceResponse.PersistenceResponseType type = 2;
inline bool PersistenceResponse::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PersistenceResponse::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PersistenceResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PersistenceResponse::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::chattp::PersistenceResponse_PersistenceResponseType PersistenceResponse::type() const {
  return static_cast< ::chattp::PersistenceResponse_PersistenceResponseType >(type_);
}
inline void PersistenceResponse::set_type(::chattp::PersistenceResponse_PersistenceResponseType value) {
  assert(::chattp::PersistenceResponse_PersistenceResponseType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bool status = 3 [default = true];
inline bool PersistenceResponse::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PersistenceResponse::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PersistenceResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PersistenceResponse::clear_status() {
  status_ = true;
  clear_has_status();
}
inline bool PersistenceResponse::status() const {
  return status_;
}
inline void PersistenceResponse::set_status(bool value) {
  set_has_status();
  status_ = value;
}

// repeated .chattp.PersistenceResponse.UserLocation user_locations = 4;
inline int PersistenceResponse::user_locations_size() const {
  return user_locations_.size();
}
inline void PersistenceResponse::clear_user_locations() {
  user_locations_.Clear();
}
inline const ::chattp::PersistenceResponse_UserLocation& PersistenceResponse::user_locations(int index) const {
  return user_locations_.Get(index);
}
inline ::chattp::PersistenceResponse_UserLocation* PersistenceResponse::mutable_user_locations(int index) {
  return user_locations_.Mutable(index);
}
inline ::chattp::PersistenceResponse_UserLocation* PersistenceResponse::add_user_locations() {
  return user_locations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chattp::PersistenceResponse_UserLocation >&
PersistenceResponse::user_locations() const {
  return user_locations_;
}
inline ::google::protobuf::RepeatedPtrField< ::chattp::PersistenceResponse_UserLocation >*
PersistenceResponse::mutable_user_locations() {
  return &user_locations_;
}

// repeated .chattp.ChattpMessage mesgs = 5;
inline int PersistenceResponse::mesgs_size() const {
  return mesgs_.size();
}
inline void PersistenceResponse::clear_mesgs() {
  mesgs_.Clear();
}
inline const ::chattp::ChattpMessage& PersistenceResponse::mesgs(int index) const {
  return mesgs_.Get(index);
}
inline ::chattp::ChattpMessage* PersistenceResponse::mutable_mesgs(int index) {
  return mesgs_.Mutable(index);
}
inline ::chattp::ChattpMessage* PersistenceResponse::add_mesgs() {
  return mesgs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chattp::ChattpMessage >&
PersistenceResponse::mesgs() const {
  return mesgs_;
}
inline ::google::protobuf::RepeatedPtrField< ::chattp::ChattpMessage >*
PersistenceResponse::mutable_mesgs() {
  return &mesgs_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace chattp

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chattp::PersistenceRequest_PersistenceRequestType>() {
  return ::chattp::PersistenceRequest_PersistenceRequestType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chattp::PersistenceResponse_PersistenceResponseType>() {
  return ::chattp::PersistenceResponse_PersistenceResponseType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_persistence_2eproto__INCLUDED
