// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messagerelay.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messagerelay.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace chattp {

namespace {

const ::google::protobuf::Descriptor* MessageRelayRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageRelayRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageRelayRequest_MessageRelayRequestType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MessageRelayResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageRelayResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageRelayResponse_MessageRelayResponseType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_messagerelay_2eproto() {
  protobuf_AddDesc_messagerelay_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messagerelay.proto");
  GOOGLE_CHECK(file != NULL);
  MessageRelayRequest_descriptor_ = file->message_type(0);
  static const int MessageRelayRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRelayRequest, sequence_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRelayRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRelayRequest, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRelayRequest, mesg_),
  };
  MessageRelayRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageRelayRequest_descriptor_,
      MessageRelayRequest::default_instance_,
      MessageRelayRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRelayRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRelayRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageRelayRequest));
  MessageRelayRequest_MessageRelayRequestType_descriptor_ = MessageRelayRequest_descriptor_->enum_type(0);
  MessageRelayResponse_descriptor_ = file->message_type(1);
  static const int MessageRelayResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRelayResponse, sequence_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRelayResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRelayResponse, status_),
  };
  MessageRelayResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageRelayResponse_descriptor_,
      MessageRelayResponse::default_instance_,
      MessageRelayResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRelayResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRelayResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageRelayResponse));
  MessageRelayResponse_MessageRelayResponseType_descriptor_ = MessageRelayResponse_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messagerelay_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageRelayRequest_descriptor_, &MessageRelayRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageRelayResponse_descriptor_, &MessageRelayResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messagerelay_2eproto() {
  delete MessageRelayRequest::default_instance_;
  delete MessageRelayRequest_reflection_;
  delete MessageRelayResponse::default_instance_;
  delete MessageRelayResponse_reflection_;
}

void protobuf_AddDesc_messagerelay_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::chattp::protobuf_AddDesc_message_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022messagerelay.proto\022\006chattp\032\rmessage.pr"
    "oto\"\374\001\n\023MessageRelayRequest\022\027\n\017sequence_"
    "number\030\001 \002(\004\022A\n\004type\030\002 \002(\01623.chattp.Mess"
    "ageRelayRequest.MessageRelayRequestType\022"
    "\022\n\nchannel_id\030\003 \002(\t\022#\n\004mesg\030\004 \001(\0132\025.chat"
    "tp.ChattpMessage\"P\n\027MessageRelayRequestT"
    "ype\022\017\n\013SENDMESSAGE\020\000\022\021\n\rCREATECHANNEL\020\001\022"
    "\021\n\rDELETECHANNEL\020\002\"\337\001\n\024MessageRelayRespo"
    "nse\022\027\n\017sequence_number\030\001 \002(\004\022C\n\004type\030\002 \002"
    "(\01625.chattp.MessageRelayResponse.Message"
    "RelayResponseType\022\024\n\006status\030\003 \001(\010:\004true\""
    "S\n\030MessageRelayResponseType\022\017\n\013SENTMESSA"
    "GE\020\000\022\022\n\016CREATEDCHANNEL\020\001\022\022\n\016DELETEDCHANN"
    "EL\020\002", 524);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messagerelay.proto", &protobuf_RegisterTypes);
  MessageRelayRequest::default_instance_ = new MessageRelayRequest();
  MessageRelayResponse::default_instance_ = new MessageRelayResponse();
  MessageRelayRequest::default_instance_->InitAsDefaultInstance();
  MessageRelayResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messagerelay_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messagerelay_2eproto {
  StaticDescriptorInitializer_messagerelay_2eproto() {
    protobuf_AddDesc_messagerelay_2eproto();
  }
} static_descriptor_initializer_messagerelay_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* MessageRelayRequest_MessageRelayRequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageRelayRequest_MessageRelayRequestType_descriptor_;
}
bool MessageRelayRequest_MessageRelayRequestType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MessageRelayRequest_MessageRelayRequestType MessageRelayRequest::SENDMESSAGE;
const MessageRelayRequest_MessageRelayRequestType MessageRelayRequest::CREATECHANNEL;
const MessageRelayRequest_MessageRelayRequestType MessageRelayRequest::DELETECHANNEL;
const MessageRelayRequest_MessageRelayRequestType MessageRelayRequest::MessageRelayRequestType_MIN;
const MessageRelayRequest_MessageRelayRequestType MessageRelayRequest::MessageRelayRequestType_MAX;
const int MessageRelayRequest::MessageRelayRequestType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MessageRelayRequest::kSequenceNumberFieldNumber;
const int MessageRelayRequest::kTypeFieldNumber;
const int MessageRelayRequest::kChannelIdFieldNumber;
const int MessageRelayRequest::kMesgFieldNumber;
#endif  // !_MSC_VER

MessageRelayRequest::MessageRelayRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessageRelayRequest::InitAsDefaultInstance() {
  mesg_ = const_cast< ::chattp::ChattpMessage*>(&::chattp::ChattpMessage::default_instance());
}

MessageRelayRequest::MessageRelayRequest(const MessageRelayRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessageRelayRequest::SharedCtor() {
  _cached_size_ = 0;
  sequence_number_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mesg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageRelayRequest::~MessageRelayRequest() {
  SharedDtor();
}

void MessageRelayRequest::SharedDtor() {
  if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_id_;
  }
  if (this != default_instance_) {
    delete mesg_;
  }
}

void MessageRelayRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageRelayRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageRelayRequest_descriptor_;
}

const MessageRelayRequest& MessageRelayRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messagerelay_2eproto();
  return *default_instance_;
}

MessageRelayRequest* MessageRelayRequest::default_instance_ = NULL;

MessageRelayRequest* MessageRelayRequest::New() const {
  return new MessageRelayRequest;
}

void MessageRelayRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sequence_number_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
    if (has_channel_id()) {
      if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_id_->clear();
      }
    }
    if (has_mesg()) {
      if (mesg_ != NULL) mesg_->::chattp::ChattpMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageRelayRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 sequence_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sequence_number_)));
          set_has_sequence_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .chattp.MessageRelayRequest.MessageRelayRequestType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chattp::MessageRelayRequest_MessageRelayRequestType_IsValid(value)) {
            set_type(static_cast< ::chattp::MessageRelayRequest_MessageRelayRequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_channel_id;
        break;
      }

      // required string channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_id().data(), this->channel_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mesg;
        break;
      }

      // optional .chattp.ChattpMessage mesg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mesg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mesg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageRelayRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 sequence_number = 1;
  if (has_sequence_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sequence_number(), output);
  }

  // required .chattp.MessageRelayRequest.MessageRelayRequestType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required string channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->channel_id(), output);
  }

  // optional .chattp.ChattpMessage mesg = 4;
  if (has_mesg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mesg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessageRelayRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 sequence_number = 1;
  if (has_sequence_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sequence_number(), target);
  }

  // required .chattp.MessageRelayRequest.MessageRelayRequestType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required string channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->channel_id(), target);
  }

  // optional .chattp.ChattpMessage mesg = 4;
  if (has_mesg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mesg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessageRelayRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 sequence_number = 1;
    if (has_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sequence_number());
    }

    // required .chattp.MessageRelayRequest.MessageRelayRequestType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required string channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_id());
    }

    // optional .chattp.ChattpMessage mesg = 4;
    if (has_mesg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mesg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageRelayRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageRelayRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageRelayRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageRelayRequest::MergeFrom(const MessageRelayRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequence_number()) {
      set_sequence_number(from.sequence_number());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_mesg()) {
      mutable_mesg()->::chattp::ChattpMessage::MergeFrom(from.mesg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageRelayRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageRelayRequest::CopyFrom(const MessageRelayRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageRelayRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_mesg()) {
    if (!this->mesg().IsInitialized()) return false;
  }
  return true;
}

void MessageRelayRequest::Swap(MessageRelayRequest* other) {
  if (other != this) {
    std::swap(sequence_number_, other->sequence_number_);
    std::swap(type_, other->type_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(mesg_, other->mesg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageRelayRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageRelayRequest_descriptor_;
  metadata.reflection = MessageRelayRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MessageRelayResponse_MessageRelayResponseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageRelayResponse_MessageRelayResponseType_descriptor_;
}
bool MessageRelayResponse_MessageRelayResponseType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MessageRelayResponse_MessageRelayResponseType MessageRelayResponse::SENTMESSAGE;
const MessageRelayResponse_MessageRelayResponseType MessageRelayResponse::CREATEDCHANNEL;
const MessageRelayResponse_MessageRelayResponseType MessageRelayResponse::DELETEDCHANNEL;
const MessageRelayResponse_MessageRelayResponseType MessageRelayResponse::MessageRelayResponseType_MIN;
const MessageRelayResponse_MessageRelayResponseType MessageRelayResponse::MessageRelayResponseType_MAX;
const int MessageRelayResponse::MessageRelayResponseType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MessageRelayResponse::kSequenceNumberFieldNumber;
const int MessageRelayResponse::kTypeFieldNumber;
const int MessageRelayResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

MessageRelayResponse::MessageRelayResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessageRelayResponse::InitAsDefaultInstance() {
}

MessageRelayResponse::MessageRelayResponse(const MessageRelayResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessageRelayResponse::SharedCtor() {
  _cached_size_ = 0;
  sequence_number_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  status_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageRelayResponse::~MessageRelayResponse() {
  SharedDtor();
}

void MessageRelayResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageRelayResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageRelayResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageRelayResponse_descriptor_;
}

const MessageRelayResponse& MessageRelayResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messagerelay_2eproto();
  return *default_instance_;
}

MessageRelayResponse* MessageRelayResponse::default_instance_ = NULL;

MessageRelayResponse* MessageRelayResponse::New() const {
  return new MessageRelayResponse;
}

void MessageRelayResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sequence_number_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
    status_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageRelayResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 sequence_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sequence_number_)));
          set_has_sequence_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .chattp.MessageRelayResponse.MessageRelayResponseType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chattp::MessageRelayResponse_MessageRelayResponseType_IsValid(value)) {
            set_type(static_cast< ::chattp::MessageRelayResponse_MessageRelayResponseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional bool status = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageRelayResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 sequence_number = 1;
  if (has_sequence_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sequence_number(), output);
  }

  // required .chattp.MessageRelayResponse.MessageRelayResponseType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional bool status = 3 [default = true];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessageRelayResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 sequence_number = 1;
  if (has_sequence_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sequence_number(), target);
  }

  // required .chattp.MessageRelayResponse.MessageRelayResponseType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional bool status = 3 [default = true];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessageRelayResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 sequence_number = 1;
    if (has_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sequence_number());
    }

    // required .chattp.MessageRelayResponse.MessageRelayResponseType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool status = 3 [default = true];
    if (has_status()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageRelayResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageRelayResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageRelayResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageRelayResponse::MergeFrom(const MessageRelayResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequence_number()) {
      set_sequence_number(from.sequence_number());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageRelayResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageRelayResponse::CopyFrom(const MessageRelayResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageRelayResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MessageRelayResponse::Swap(MessageRelayResponse* other) {
  if (other != this) {
    std::swap(sequence_number_, other->sequence_number_);
    std::swap(type_, other->type_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageRelayResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageRelayResponse_descriptor_;
  metadata.reflection = MessageRelayResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace chattp

// @@protoc_insertion_point(global_scope)
